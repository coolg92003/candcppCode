// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trace_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_trace_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_trace_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_trace_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_trace_2eproto;
namespace trace {
class Connection;
struct ConnectionDefaultTypeInternal;
extern ConnectionDefaultTypeInternal _Connection_default_instance_;
class Data;
struct DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Read;
struct ReadDefaultTypeInternal;
extern ReadDefaultTypeInternal _Read_default_instance_;
class SocketAddress;
struct SocketAddressDefaultTypeInternal;
extern SocketAddressDefaultTypeInternal _SocketAddress_default_instance_;
class SocketStreamedTraceSegment;
struct SocketStreamedTraceSegmentDefaultTypeInternal;
extern SocketStreamedTraceSegmentDefaultTypeInternal _SocketStreamedTraceSegment_default_instance_;
class Timestamp;
struct TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace trace
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace trace {

// ===================================================================


// -------------------------------------------------------------------

class Timestamp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace.Timestamp) */ {
 public:
  inline Timestamp() : Timestamp(nullptr) {}
  ~Timestamp() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Timestamp(::google::protobuf::internal::ConstantInitialized);

  Timestamp(const Timestamp& from);
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Timestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Timestamp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timestamp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Timestamp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Timestamp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Timestamp& from) {
    Timestamp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace.Timestamp";
  }
  protected:
  explicit Timestamp(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kNanosFieldNumber = 2,
  };
  // int64 seconds = 1;
  void clear_seconds() ;
  ::int64_t seconds() const;
  void set_seconds(::int64_t value);

  private:
  ::int64_t _internal_seconds() const;
  void _internal_set_seconds(::int64_t value);

  public:
  // int32 nanos = 2;
  void clear_nanos() ;
  ::int32_t nanos() const;
  void set_nanos(::int32_t value);

  private:
  ::int32_t _internal_nanos() const;
  void _internal_set_nanos(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:trace.Timestamp)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t seconds_;
    ::int32_t nanos_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace_2eproto;
};// -------------------------------------------------------------------

class Data final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace.Data) */ {
 public:
  inline Data() : Data(nullptr) {}
  ~Data() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Data(::google::protobuf::internal::ConstantInitialized);

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Data* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Data* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Data& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Data& from) {
    Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace.Data";
  }
  protected:
  explicit Data(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsBytesFieldNumber = 1,
  };
  // bytes as_bytes = 1;
  void clear_as_bytes() ;
  const std::string& as_bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_as_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_as_bytes();
  PROTOBUF_NODISCARD std::string* release_as_bytes();
  void set_allocated_as_bytes(std::string* ptr);

  private:
  const std::string& _internal_as_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_as_bytes(
      const std::string& value);
  std::string* _internal_mutable_as_bytes();

  public:
  // @@protoc_insertion_point(class_scope:trace.Data)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr as_bytes_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace_2eproto;
};// -------------------------------------------------------------------

class Read final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace.Read) */ {
 public:
  inline Read() : Read(nullptr) {}
  ~Read() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Read(::google::protobuf::internal::ConstantInitialized);

  Read(const Read& from);
  Read(Read&& from) noexcept
    : Read() {
    *this = ::std::move(from);
  }

  inline Read& operator=(const Read& from) {
    CopyFrom(from);
    return *this;
  }
  inline Read& operator=(Read&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Read& default_instance() {
    return *internal_default_instance();
  }
  static inline const Read* internal_default_instance() {
    return reinterpret_cast<const Read*>(
               &_Read_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Read& a, Read& b) {
    a.Swap(&b);
  }
  inline void Swap(Read* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Read* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Read* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Read>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Read& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Read& from) {
    Read::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Read* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace.Read";
  }
  protected:
  explicit Read(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .trace.Data data = 1;
  bool has_data() const;
  void clear_data() ;
  const ::trace::Data& data() const;
  PROTOBUF_NODISCARD ::trace::Data* release_data();
  ::trace::Data* mutable_data();
  void set_allocated_data(::trace::Data* value);
  void unsafe_arena_set_allocated_data(::trace::Data* value);
  ::trace::Data* unsafe_arena_release_data();

  private:
  const ::trace::Data& _internal_data() const;
  ::trace::Data* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:trace.Read)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::trace::Data* data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace_2eproto;
};// -------------------------------------------------------------------

class SocketAddress final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace.SocketAddress) */ {
 public:
  inline SocketAddress() : SocketAddress(nullptr) {}
  ~SocketAddress() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SocketAddress(::google::protobuf::internal::ConstantInitialized);

  SocketAddress(const SocketAddress& from);
  SocketAddress(SocketAddress&& from) noexcept
    : SocketAddress() {
    *this = ::std::move(from);
  }

  inline SocketAddress& operator=(const SocketAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocketAddress& operator=(SocketAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SocketAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const SocketAddress* internal_default_instance() {
    return reinterpret_cast<const SocketAddress*>(
               &_SocketAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SocketAddress& a, SocketAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(SocketAddress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocketAddress* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SocketAddress* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SocketAddress>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SocketAddress& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SocketAddress& from) {
    SocketAddress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SocketAddress* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace.SocketAddress";
  }
  protected:
  explicit SocketAddress(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPortValueFieldNumber = 2,
  };
  // string address = 1;
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // int32 port_value = 2;
  void clear_port_value() ;
  ::int32_t port_value() const;
  void set_port_value(::int32_t value);

  private:
  ::int32_t _internal_port_value() const;
  void _internal_set_port_value(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:trace.SocketAddress)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 35, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::int32_t port_value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace_2eproto;
};// -------------------------------------------------------------------

class Connection final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace.Connection) */ {
 public:
  inline Connection() : Connection(nullptr) {}
  ~Connection() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Connection(::google::protobuf::internal::ConstantInitialized);

  Connection(const Connection& from);
  Connection(Connection&& from) noexcept
    : Connection() {
    *this = ::std::move(from);
  }

  inline Connection& operator=(const Connection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Connection& operator=(Connection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Connection& default_instance() {
    return *internal_default_instance();
  }
  static inline const Connection* internal_default_instance() {
    return reinterpret_cast<const Connection*>(
               &_Connection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Connection& a, Connection& b) {
    a.Swap(&b);
  }
  inline void Swap(Connection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Connection* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Connection* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Connection>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Connection& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Connection& from) {
    Connection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Connection* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace.Connection";
  }
  protected:
  explicit Connection(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalAddressFieldNumber = 1,
    kRemoteAddressFieldNumber = 2,
  };
  // .trace.SocketAddress local_address = 1;
  bool has_local_address() const;
  void clear_local_address() ;
  const ::trace::SocketAddress& local_address() const;
  PROTOBUF_NODISCARD ::trace::SocketAddress* release_local_address();
  ::trace::SocketAddress* mutable_local_address();
  void set_allocated_local_address(::trace::SocketAddress* value);
  void unsafe_arena_set_allocated_local_address(::trace::SocketAddress* value);
  ::trace::SocketAddress* unsafe_arena_release_local_address();

  private:
  const ::trace::SocketAddress& _internal_local_address() const;
  ::trace::SocketAddress* _internal_mutable_local_address();

  public:
  // .trace.SocketAddress remote_address = 2;
  bool has_remote_address() const;
  void clear_remote_address() ;
  const ::trace::SocketAddress& remote_address() const;
  PROTOBUF_NODISCARD ::trace::SocketAddress* release_remote_address();
  ::trace::SocketAddress* mutable_remote_address();
  void set_allocated_remote_address(::trace::SocketAddress* value);
  void unsafe_arena_set_allocated_remote_address(::trace::SocketAddress* value);
  ::trace::SocketAddress* unsafe_arena_release_remote_address();

  private:
  const ::trace::SocketAddress& _internal_remote_address() const;
  ::trace::SocketAddress* _internal_mutable_remote_address();

  public:
  // @@protoc_insertion_point(class_scope:trace.Connection)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::trace::SocketAddress* local_address_;
    ::trace::SocketAddress* remote_address_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace_2eproto;
};// -------------------------------------------------------------------

class Event final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Event(::google::protobuf::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Event& from) {
    Event::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace.Event";
  }
  protected:
  explicit Event(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kReadFieldNumber = 2,
    kConnectionFieldNumber = 3,
  };
  // .trace.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::trace::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::trace::Timestamp* release_timestamp();
  ::trace::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::trace::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::trace::Timestamp* value);
  ::trace::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::trace::Timestamp& _internal_timestamp() const;
  ::trace::Timestamp* _internal_mutable_timestamp();

  public:
  // .trace.Read read = 2;
  bool has_read() const;
  void clear_read() ;
  const ::trace::Read& read() const;
  PROTOBUF_NODISCARD ::trace::Read* release_read();
  ::trace::Read* mutable_read();
  void set_allocated_read(::trace::Read* value);
  void unsafe_arena_set_allocated_read(::trace::Read* value);
  ::trace::Read* unsafe_arena_release_read();

  private:
  const ::trace::Read& _internal_read() const;
  ::trace::Read* _internal_mutable_read();

  public:
  // .trace.Connection connection = 3;
  bool has_connection() const;
  void clear_connection() ;
  const ::trace::Connection& connection() const;
  PROTOBUF_NODISCARD ::trace::Connection* release_connection();
  ::trace::Connection* mutable_connection();
  void set_allocated_connection(::trace::Connection* value);
  void unsafe_arena_set_allocated_connection(::trace::Connection* value);
  ::trace::Connection* unsafe_arena_release_connection();

  private:
  const ::trace::Connection& _internal_connection() const;
  ::trace::Connection* _internal_mutable_connection();

  public:
  // @@protoc_insertion_point(class_scope:trace.Event)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::trace::Timestamp* timestamp_;
    ::trace::Read* read_;
    ::trace::Connection* connection_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace_2eproto;
};// -------------------------------------------------------------------

class SocketStreamedTraceSegment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace.SocketStreamedTraceSegment) */ {
 public:
  inline SocketStreamedTraceSegment() : SocketStreamedTraceSegment(nullptr) {}
  ~SocketStreamedTraceSegment() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SocketStreamedTraceSegment(::google::protobuf::internal::ConstantInitialized);

  SocketStreamedTraceSegment(const SocketStreamedTraceSegment& from);
  SocketStreamedTraceSegment(SocketStreamedTraceSegment&& from) noexcept
    : SocketStreamedTraceSegment() {
    *this = ::std::move(from);
  }

  inline SocketStreamedTraceSegment& operator=(const SocketStreamedTraceSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocketStreamedTraceSegment& operator=(SocketStreamedTraceSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SocketStreamedTraceSegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const SocketStreamedTraceSegment* internal_default_instance() {
    return reinterpret_cast<const SocketStreamedTraceSegment*>(
               &_SocketStreamedTraceSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SocketStreamedTraceSegment& a, SocketStreamedTraceSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(SocketStreamedTraceSegment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocketStreamedTraceSegment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SocketStreamedTraceSegment* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SocketStreamedTraceSegment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SocketStreamedTraceSegment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SocketStreamedTraceSegment& from) {
    SocketStreamedTraceSegment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SocketStreamedTraceSegment* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace.SocketStreamedTraceSegment";
  }
  protected:
  explicit SocketStreamedTraceSegment(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
  };
  // .trace.Event event = 1;
  bool has_event() const;
  void clear_event() ;
  const ::trace::Event& event() const;
  PROTOBUF_NODISCARD ::trace::Event* release_event();
  ::trace::Event* mutable_event();
  void set_allocated_event(::trace::Event* value);
  void unsafe_arena_set_allocated_event(::trace::Event* value);
  ::trace::Event* unsafe_arena_release_event();

  private:
  const ::trace::Event& _internal_event() const;
  ::trace::Event* _internal_mutable_event();

  public:
  // @@protoc_insertion_point(class_scope:trace.SocketStreamedTraceSegment)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::trace::Event* event_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Timestamp

// int64 seconds = 1;
inline void Timestamp::clear_seconds() {
  _impl_.seconds_ = ::int64_t{0};
}
inline ::int64_t Timestamp::seconds() const {
  // @@protoc_insertion_point(field_get:trace.Timestamp.seconds)
  return _internal_seconds();
}
inline void Timestamp::set_seconds(::int64_t value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:trace.Timestamp.seconds)
}
inline ::int64_t Timestamp::_internal_seconds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.seconds_;
}
inline void Timestamp::_internal_set_seconds(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.seconds_ = value;
}

// int32 nanos = 2;
inline void Timestamp::clear_nanos() {
  _impl_.nanos_ = 0;
}
inline ::int32_t Timestamp::nanos() const {
  // @@protoc_insertion_point(field_get:trace.Timestamp.nanos)
  return _internal_nanos();
}
inline void Timestamp::set_nanos(::int32_t value) {
  _internal_set_nanos(value);
  // @@protoc_insertion_point(field_set:trace.Timestamp.nanos)
}
inline ::int32_t Timestamp::_internal_nanos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nanos_;
}
inline void Timestamp::_internal_set_nanos(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nanos_ = value;
}

// -------------------------------------------------------------------

// Data

// bytes as_bytes = 1;
inline void Data::clear_as_bytes() {
  _impl_.as_bytes_.ClearToEmpty();
}
inline const std::string& Data::as_bytes() const {
  // @@protoc_insertion_point(field_get:trace.Data.as_bytes)
  return _internal_as_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Data::set_as_bytes(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.as_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:trace.Data.as_bytes)
}
inline std::string* Data::mutable_as_bytes() {
  std::string* _s = _internal_mutable_as_bytes();
  // @@protoc_insertion_point(field_mutable:trace.Data.as_bytes)
  return _s;
}
inline const std::string& Data::_internal_as_bytes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.as_bytes_.Get();
}
inline void Data::_internal_set_as_bytes(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.as_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* Data::_internal_mutable_as_bytes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.as_bytes_.Mutable( GetArenaForAllocation());
}
inline std::string* Data::release_as_bytes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace.Data.as_bytes)
  return _impl_.as_bytes_.Release();
}
inline void Data::set_allocated_as_bytes(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.as_bytes_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.as_bytes_.IsDefault()) {
          _impl_.as_bytes_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:trace.Data.as_bytes)
}

// -------------------------------------------------------------------

// Read

// .trace.Data data = 1;
inline bool Read::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline void Read::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::trace::Data& Read::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::trace::Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::trace::Data&>(::trace::_Data_default_instance_);
}
inline const ::trace::Data& Read::data() const {
  // @@protoc_insertion_point(field_get:trace.Read.data)
  return _internal_data();
}
inline void Read::unsafe_arena_set_allocated_data(::trace::Data* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::trace::Data*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace.Read.data)
}
inline ::trace::Data* Read::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trace::Data* released = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::trace::Data* Read::unsafe_arena_release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace.Read.data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trace::Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::trace::Data* Read::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::trace::Data>(GetArenaForAllocation());
    _impl_.data_ = reinterpret_cast<::trace::Data*>(p);
  }
  return _impl_.data_;
}
inline ::trace::Data* Read::mutable_data() {
  ::trace::Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:trace.Read.data)
  return _msg;
}
inline void Read::set_allocated_data(::trace::Data* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::trace::Data*>(_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::trace::Data*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.data_ = reinterpret_cast<::trace::Data*>(value);
  // @@protoc_insertion_point(field_set_allocated:trace.Read.data)
}

// -------------------------------------------------------------------

// SocketAddress

// string address = 1;
inline void SocketAddress::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& SocketAddress::address() const {
  // @@protoc_insertion_point(field_get:trace.SocketAddress.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SocketAddress::set_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:trace.SocketAddress.address)
}
inline std::string* SocketAddress::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:trace.SocketAddress.address)
  return _s;
}
inline const std::string& SocketAddress::_internal_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.address_.Get();
}
inline void SocketAddress::_internal_set_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* SocketAddress::_internal_mutable_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* SocketAddress::release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace.SocketAddress.address)
  return _impl_.address_.Release();
}
inline void SocketAddress::set_allocated_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:trace.SocketAddress.address)
}

// int32 port_value = 2;
inline void SocketAddress::clear_port_value() {
  _impl_.port_value_ = 0;
}
inline ::int32_t SocketAddress::port_value() const {
  // @@protoc_insertion_point(field_get:trace.SocketAddress.port_value)
  return _internal_port_value();
}
inline void SocketAddress::set_port_value(::int32_t value) {
  _internal_set_port_value(value);
  // @@protoc_insertion_point(field_set:trace.SocketAddress.port_value)
}
inline ::int32_t SocketAddress::_internal_port_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_value_;
}
inline void SocketAddress::_internal_set_port_value(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_value_ = value;
}

// -------------------------------------------------------------------

// Connection

// .trace.SocketAddress local_address = 1;
inline bool Connection::has_local_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.local_address_ != nullptr);
  return value;
}
inline void Connection::clear_local_address() {
  if (_impl_.local_address_ != nullptr) _impl_.local_address_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::trace::SocketAddress& Connection::_internal_local_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::trace::SocketAddress* p = _impl_.local_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::trace::SocketAddress&>(::trace::_SocketAddress_default_instance_);
}
inline const ::trace::SocketAddress& Connection::local_address() const {
  // @@protoc_insertion_point(field_get:trace.Connection.local_address)
  return _internal_local_address();
}
inline void Connection::unsafe_arena_set_allocated_local_address(::trace::SocketAddress* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.local_address_);
  }
  _impl_.local_address_ = reinterpret_cast<::trace::SocketAddress*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace.Connection.local_address)
}
inline ::trace::SocketAddress* Connection::release_local_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trace::SocketAddress* released = _impl_.local_address_;
  _impl_.local_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::trace::SocketAddress* Connection::unsafe_arena_release_local_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace.Connection.local_address)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trace::SocketAddress* temp = _impl_.local_address_;
  _impl_.local_address_ = nullptr;
  return temp;
}
inline ::trace::SocketAddress* Connection::_internal_mutable_local_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.local_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::trace::SocketAddress>(GetArenaForAllocation());
    _impl_.local_address_ = reinterpret_cast<::trace::SocketAddress*>(p);
  }
  return _impl_.local_address_;
}
inline ::trace::SocketAddress* Connection::mutable_local_address() {
  ::trace::SocketAddress* _msg = _internal_mutable_local_address();
  // @@protoc_insertion_point(field_mutable:trace.Connection.local_address)
  return _msg;
}
inline void Connection::set_allocated_local_address(::trace::SocketAddress* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::trace::SocketAddress*>(_impl_.local_address_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::trace::SocketAddress*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.local_address_ = reinterpret_cast<::trace::SocketAddress*>(value);
  // @@protoc_insertion_point(field_set_allocated:trace.Connection.local_address)
}

// .trace.SocketAddress remote_address = 2;
inline bool Connection::has_remote_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.remote_address_ != nullptr);
  return value;
}
inline void Connection::clear_remote_address() {
  if (_impl_.remote_address_ != nullptr) _impl_.remote_address_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::trace::SocketAddress& Connection::_internal_remote_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::trace::SocketAddress* p = _impl_.remote_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::trace::SocketAddress&>(::trace::_SocketAddress_default_instance_);
}
inline const ::trace::SocketAddress& Connection::remote_address() const {
  // @@protoc_insertion_point(field_get:trace.Connection.remote_address)
  return _internal_remote_address();
}
inline void Connection::unsafe_arena_set_allocated_remote_address(::trace::SocketAddress* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.remote_address_);
  }
  _impl_.remote_address_ = reinterpret_cast<::trace::SocketAddress*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace.Connection.remote_address)
}
inline ::trace::SocketAddress* Connection::release_remote_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::trace::SocketAddress* released = _impl_.remote_address_;
  _impl_.remote_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::trace::SocketAddress* Connection::unsafe_arena_release_remote_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace.Connection.remote_address)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::trace::SocketAddress* temp = _impl_.remote_address_;
  _impl_.remote_address_ = nullptr;
  return temp;
}
inline ::trace::SocketAddress* Connection::_internal_mutable_remote_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.remote_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::trace::SocketAddress>(GetArenaForAllocation());
    _impl_.remote_address_ = reinterpret_cast<::trace::SocketAddress*>(p);
  }
  return _impl_.remote_address_;
}
inline ::trace::SocketAddress* Connection::mutable_remote_address() {
  ::trace::SocketAddress* _msg = _internal_mutable_remote_address();
  // @@protoc_insertion_point(field_mutable:trace.Connection.remote_address)
  return _msg;
}
inline void Connection::set_allocated_remote_address(::trace::SocketAddress* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::trace::SocketAddress*>(_impl_.remote_address_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::trace::SocketAddress*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.remote_address_ = reinterpret_cast<::trace::SocketAddress*>(value);
  // @@protoc_insertion_point(field_set_allocated:trace.Connection.remote_address)
}

// -------------------------------------------------------------------

// Event

// .trace.Timestamp timestamp = 1;
inline bool Event::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline void Event::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::trace::Timestamp& Event::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::trace::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::trace::Timestamp&>(::trace::_Timestamp_default_instance_);
}
inline const ::trace::Timestamp& Event::timestamp() const {
  // @@protoc_insertion_point(field_get:trace.Event.timestamp)
  return _internal_timestamp();
}
inline void Event::unsafe_arena_set_allocated_timestamp(::trace::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::trace::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace.Event.timestamp)
}
inline ::trace::Timestamp* Event::release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trace::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::trace::Timestamp* Event::unsafe_arena_release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace.Event.timestamp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trace::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::trace::Timestamp* Event::_internal_mutable_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::trace::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = reinterpret_cast<::trace::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::trace::Timestamp* Event::mutable_timestamp() {
  ::trace::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:trace.Event.timestamp)
  return _msg;
}
inline void Event::set_allocated_timestamp(::trace::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::trace::Timestamp*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::trace::Timestamp*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_ = reinterpret_cast<::trace::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:trace.Event.timestamp)
}

// .trace.Read read = 2;
inline bool Event::has_read() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.read_ != nullptr);
  return value;
}
inline void Event::clear_read() {
  if (_impl_.read_ != nullptr) _impl_.read_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::trace::Read& Event::_internal_read() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::trace::Read* p = _impl_.read_;
  return p != nullptr ? *p : reinterpret_cast<const ::trace::Read&>(::trace::_Read_default_instance_);
}
inline const ::trace::Read& Event::read() const {
  // @@protoc_insertion_point(field_get:trace.Event.read)
  return _internal_read();
}
inline void Event::unsafe_arena_set_allocated_read(::trace::Read* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.read_);
  }
  _impl_.read_ = reinterpret_cast<::trace::Read*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace.Event.read)
}
inline ::trace::Read* Event::release_read() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::trace::Read* released = _impl_.read_;
  _impl_.read_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::trace::Read* Event::unsafe_arena_release_read() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace.Event.read)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::trace::Read* temp = _impl_.read_;
  _impl_.read_ = nullptr;
  return temp;
}
inline ::trace::Read* Event::_internal_mutable_read() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.read_ == nullptr) {
    auto* p = CreateMaybeMessage<::trace::Read>(GetArenaForAllocation());
    _impl_.read_ = reinterpret_cast<::trace::Read*>(p);
  }
  return _impl_.read_;
}
inline ::trace::Read* Event::mutable_read() {
  ::trace::Read* _msg = _internal_mutable_read();
  // @@protoc_insertion_point(field_mutable:trace.Event.read)
  return _msg;
}
inline void Event::set_allocated_read(::trace::Read* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::trace::Read*>(_impl_.read_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::trace::Read*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.read_ = reinterpret_cast<::trace::Read*>(value);
  // @@protoc_insertion_point(field_set_allocated:trace.Event.read)
}

// .trace.Connection connection = 3;
inline bool Event::has_connection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connection_ != nullptr);
  return value;
}
inline void Event::clear_connection() {
  if (_impl_.connection_ != nullptr) _impl_.connection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::trace::Connection& Event::_internal_connection() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::trace::Connection* p = _impl_.connection_;
  return p != nullptr ? *p : reinterpret_cast<const ::trace::Connection&>(::trace::_Connection_default_instance_);
}
inline const ::trace::Connection& Event::connection() const {
  // @@protoc_insertion_point(field_get:trace.Event.connection)
  return _internal_connection();
}
inline void Event::unsafe_arena_set_allocated_connection(::trace::Connection* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.connection_);
  }
  _impl_.connection_ = reinterpret_cast<::trace::Connection*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace.Event.connection)
}
inline ::trace::Connection* Event::release_connection() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::trace::Connection* released = _impl_.connection_;
  _impl_.connection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::trace::Connection* Event::unsafe_arena_release_connection() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace.Event.connection)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::trace::Connection* temp = _impl_.connection_;
  _impl_.connection_ = nullptr;
  return temp;
}
inline ::trace::Connection* Event::_internal_mutable_connection() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.connection_ == nullptr) {
    auto* p = CreateMaybeMessage<::trace::Connection>(GetArenaForAllocation());
    _impl_.connection_ = reinterpret_cast<::trace::Connection*>(p);
  }
  return _impl_.connection_;
}
inline ::trace::Connection* Event::mutable_connection() {
  ::trace::Connection* _msg = _internal_mutable_connection();
  // @@protoc_insertion_point(field_mutable:trace.Event.connection)
  return _msg;
}
inline void Event::set_allocated_connection(::trace::Connection* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::trace::Connection*>(_impl_.connection_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::trace::Connection*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.connection_ = reinterpret_cast<::trace::Connection*>(value);
  // @@protoc_insertion_point(field_set_allocated:trace.Event.connection)
}

// -------------------------------------------------------------------

// SocketStreamedTraceSegment

// .trace.Event event = 1;
inline bool SocketStreamedTraceSegment::has_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.event_ != nullptr);
  return value;
}
inline void SocketStreamedTraceSegment::clear_event() {
  if (_impl_.event_ != nullptr) _impl_.event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::trace::Event& SocketStreamedTraceSegment::_internal_event() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::trace::Event* p = _impl_.event_;
  return p != nullptr ? *p : reinterpret_cast<const ::trace::Event&>(::trace::_Event_default_instance_);
}
inline const ::trace::Event& SocketStreamedTraceSegment::event() const {
  // @@protoc_insertion_point(field_get:trace.SocketStreamedTraceSegment.event)
  return _internal_event();
}
inline void SocketStreamedTraceSegment::unsafe_arena_set_allocated_event(::trace::Event* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.event_);
  }
  _impl_.event_ = reinterpret_cast<::trace::Event*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace.SocketStreamedTraceSegment.event)
}
inline ::trace::Event* SocketStreamedTraceSegment::release_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trace::Event* released = _impl_.event_;
  _impl_.event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::trace::Event* SocketStreamedTraceSegment::unsafe_arena_release_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace.SocketStreamedTraceSegment.event)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trace::Event* temp = _impl_.event_;
  _impl_.event_ = nullptr;
  return temp;
}
inline ::trace::Event* SocketStreamedTraceSegment::_internal_mutable_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.event_ == nullptr) {
    auto* p = CreateMaybeMessage<::trace::Event>(GetArenaForAllocation());
    _impl_.event_ = reinterpret_cast<::trace::Event*>(p);
  }
  return _impl_.event_;
}
inline ::trace::Event* SocketStreamedTraceSegment::mutable_event() {
  ::trace::Event* _msg = _internal_mutable_event();
  // @@protoc_insertion_point(field_mutable:trace.SocketStreamedTraceSegment.event)
  return _msg;
}
inline void SocketStreamedTraceSegment::set_allocated_event(::trace::Event* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::trace::Event*>(_impl_.event_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::trace::Event*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.event_ = reinterpret_cast<::trace::Event*>(value);
  // @@protoc_insertion_point(field_set_allocated:trace.SocketStreamedTraceSegment.event)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace trace


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_trace_2eproto_2epb_2eh
