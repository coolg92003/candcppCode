// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trace.proto

#include "trace.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace trace {
        template <typename>
PROTOBUF_CONSTEXPR Timestamp::Timestamp(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.seconds_)*/ ::int64_t{0},
      /*decltype(_impl_.nanos_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TimestampDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimestampDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimestampDefaultTypeInternal() {}
  union {
    Timestamp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimestampDefaultTypeInternal _Timestamp_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Data::Data(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.as_bytes_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataDefaultTypeInternal() {}
  union {
    Data _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataDefaultTypeInternal _Data_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Read::Read(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.data_)*/ nullptr,
    } {}
struct ReadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadDefaultTypeInternal() {}
  union {
    Read _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadDefaultTypeInternal _Read_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SocketAddress::SocketAddress(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.address_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.port_value_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SocketAddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SocketAddressDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SocketAddressDefaultTypeInternal() {}
  union {
    SocketAddress _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SocketAddressDefaultTypeInternal _SocketAddress_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Connection::Connection(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.local_address_)*/ nullptr,
      /*decltype(_impl_.remote_address_)*/ nullptr,
    } {}
struct ConnectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionDefaultTypeInternal() {}
  union {
    Connection _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionDefaultTypeInternal _Connection_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Event::Event(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.timestamp_)*/ nullptr,
      /*decltype(_impl_.read_)*/ nullptr,
      /*decltype(_impl_.connection_)*/ nullptr,
    } {}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SocketStreamedTraceSegment::SocketStreamedTraceSegment(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.event_)*/ nullptr,
    } {}
struct SocketStreamedTraceSegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SocketStreamedTraceSegmentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SocketStreamedTraceSegmentDefaultTypeInternal() {}
  union {
    SocketStreamedTraceSegment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SocketStreamedTraceSegmentDefaultTypeInternal _SocketStreamedTraceSegment_default_instance_;
}  // namespace trace
static ::_pb::Metadata file_level_metadata_trace_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_trace_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_trace_2eproto = nullptr;
const ::uint32_t TableStruct_trace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::trace::Timestamp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::trace::Timestamp, _impl_.seconds_),
    PROTOBUF_FIELD_OFFSET(::trace::Timestamp, _impl_.nanos_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::trace::Data, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::trace::Data, _impl_.as_bytes_),
    PROTOBUF_FIELD_OFFSET(::trace::Read, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::trace::Read, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::trace::Read, _impl_.data_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::trace::SocketAddress, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::trace::SocketAddress, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::trace::SocketAddress, _impl_.port_value_),
    PROTOBUF_FIELD_OFFSET(::trace::Connection, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::trace::Connection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::trace::Connection, _impl_.local_address_),
    PROTOBUF_FIELD_OFFSET(::trace::Connection, _impl_.remote_address_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::trace::Event, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::trace::Event, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::trace::Event, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::trace::Event, _impl_.read_),
    PROTOBUF_FIELD_OFFSET(::trace::Event, _impl_.connection_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::trace::SocketStreamedTraceSegment, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::trace::SocketStreamedTraceSegment, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::trace::SocketStreamedTraceSegment, _impl_.event_),
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::trace::Timestamp)},
        {10, -1, -1, sizeof(::trace::Data)},
        {19, 28, -1, sizeof(::trace::Read)},
        {29, -1, -1, sizeof(::trace::SocketAddress)},
        {39, 49, -1, sizeof(::trace::Connection)},
        {51, 62, -1, sizeof(::trace::Event)},
        {65, 74, -1, sizeof(::trace::SocketStreamedTraceSegment)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::trace::_Timestamp_default_instance_._instance,
    &::trace::_Data_default_instance_._instance,
    &::trace::_Read_default_instance_._instance,
    &::trace::_SocketAddress_default_instance_._instance,
    &::trace::_Connection_default_instance_._instance,
    &::trace::_Event_default_instance_._instance,
    &::trace::_SocketStreamedTraceSegment_default_instance_._instance,
};
const char descriptor_table_protodef_trace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\013trace.proto\022\005trace\"+\n\tTimestamp\022\017\n\007sec"
    "onds\030\001 \001(\003\022\r\n\005nanos\030\002 \001(\005\"\030\n\004Data\022\020\n\010as_"
    "bytes\030\001 \001(\014\"!\n\004Read\022\031\n\004data\030\001 \001(\0132\013.trac"
    "e.Data\"4\n\rSocketAddress\022\017\n\007address\030\001 \001(\t"
    "\022\022\n\nport_value\030\002 \001(\005\"g\n\nConnection\022+\n\rlo"
    "cal_address\030\001 \001(\0132\024.trace.SocketAddress\022"
    ",\n\016remote_address\030\002 \001(\0132\024.trace.SocketAd"
    "dress\"n\n\005Event\022#\n\ttimestamp\030\001 \001(\0132\020.trac"
    "e.Timestamp\022\031\n\004read\030\002 \001(\0132\013.trace.Read\022%"
    "\n\nconnection\030\003 \001(\0132\021.trace.Connection\"9\n"
    "\032SocketStreamedTraceSegment\022\033\n\005event\030\001 \001"
    "(\0132\014.trace.Eventb\006proto3"
};
static ::absl::once_flag descriptor_table_trace_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_trace_2eproto = {
    false,
    false,
    464,
    descriptor_table_protodef_trace_2eproto,
    "trace.proto",
    &descriptor_table_trace_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_trace_2eproto::offsets,
    file_level_metadata_trace_2eproto,
    file_level_enum_descriptors_trace_2eproto,
    file_level_service_descriptors_trace_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_trace_2eproto_getter() {
  return &descriptor_table_trace_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_trace_2eproto(&descriptor_table_trace_2eproto);
namespace trace {
// ===================================================================

class Timestamp::_Internal {
 public:
};

Timestamp::Timestamp(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:trace.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trace.Timestamp)
}
inline void Timestamp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.seconds_){::int64_t{0}},
      decltype(_impl_.nanos_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:trace.Timestamp)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Timestamp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Timestamp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:trace.Timestamp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.seconds_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nanos_) -
      reinterpret_cast<char*>(&_impl_.seconds_)) + sizeof(_impl_.nanos_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Timestamp::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Timestamp::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Timestamp_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 nanos = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Timestamp, _impl_.nanos_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Timestamp, _impl_.nanos_)}},
    // int64 seconds = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Timestamp, _impl_.seconds_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Timestamp, _impl_.seconds_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 seconds = 1;
    {PROTOBUF_FIELD_OFFSET(Timestamp, _impl_.seconds_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 nanos = 2;
    {PROTOBUF_FIELD_OFFSET(Timestamp, _impl_.nanos_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Timestamp::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trace.Timestamp)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 seconds = 1;
  if (this->_internal_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_seconds(), target);
  }

  // int32 nanos = 2;
  if (this->_internal_nanos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_nanos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trace.Timestamp)
  return target;
}

::size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trace.Timestamp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 seconds = 1;
  if (this->_internal_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_seconds());
  }

  // int32 nanos = 2;
  if (this->_internal_nanos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_nanos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Timestamp::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Timestamp::MergeImpl
};
const ::google::protobuf::Message::ClassData*Timestamp::GetClassData() const { return &_class_data_; }


void Timestamp::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Timestamp*>(&to_msg);
  auto& from = static_cast<const Timestamp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:trace.Timestamp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seconds() != 0) {
    _this->_internal_set_seconds(from._internal_seconds());
  }
  if (from._internal_nanos() != 0) {
    _this->_internal_set_nanos(from._internal_nanos());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trace.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Timestamp, _impl_.nanos_)
      + sizeof(Timestamp::_impl_.nanos_)
      - PROTOBUF_FIELD_OFFSET(Timestamp, _impl_.seconds_)>(
          reinterpret_cast<char*>(&_impl_.seconds_),
          reinterpret_cast<char*>(&other->_impl_.seconds_));
}

::google::protobuf::Metadata Timestamp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trace_2eproto_getter, &descriptor_table_trace_2eproto_once,
      file_level_metadata_trace_2eproto[0]);
}
// ===================================================================

class Data::_Internal {
 public:
};

Data::Data(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:trace.Data)
}
Data::Data(const Data& from) : ::google::protobuf::Message() {
  Data* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.as_bytes_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.as_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.as_bytes_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_as_bytes().empty()) {
    _this->_impl_.as_bytes_.Set(from._internal_as_bytes(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:trace.Data)
}
inline void Data::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.as_bytes_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.as_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.as_bytes_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Data::~Data() {
  // @@protoc_insertion_point(destructor:trace.Data)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Data::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.as_bytes_.Destroy();
}
void Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:trace.Data)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.as_bytes_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Data::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Data::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Data_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bytes as_bytes = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Data, _impl_.as_bytes_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes as_bytes = 1;
    {PROTOBUF_FIELD_OFFSET(Data, _impl_.as_bytes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Data::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trace.Data)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes as_bytes = 1;
  if (!this->_internal_as_bytes().empty()) {
    const std::string& _s = this->_internal_as_bytes();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trace.Data)
  return target;
}

::size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trace.Data)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes as_bytes = 1;
  if (!this->_internal_as_bytes().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_as_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Data::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Data::MergeImpl
};
const ::google::protobuf::Message::ClassData*Data::GetClassData() const { return &_class_data_; }


void Data::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Data*>(&to_msg);
  auto& from = static_cast<const Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:trace.Data)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_as_bytes().empty()) {
    _this->_internal_set_as_bytes(from._internal_as_bytes());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trace.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Data::IsInitialized() const {
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.as_bytes_, lhs_arena,
                                       &other->_impl_.as_bytes_, rhs_arena);
}

::google::protobuf::Metadata Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trace_2eproto_getter, &descriptor_table_trace_2eproto_once,
      file_level_metadata_trace_2eproto[1]);
}
// ===================================================================

class Read::_Internal {
 public:
  using HasBits = decltype(std::declval<Read>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Read, _impl_._has_bits_);
  static const ::trace::Data& data(const Read* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::trace::Data& Read::_Internal::data(const Read* msg) {
  return *msg->_impl_.data_;
}
Read::Read(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:trace.Read)
}
Read::Read(const Read& from) : ::google::protobuf::Message() {
  Read* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.data_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.data_ = new ::trace::Data(*from._impl_.data_);
  }

  // @@protoc_insertion_point(copy_constructor:trace.Read)
}
inline void Read::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.data_){nullptr},
  };
}
Read::~Read() {
  // @@protoc_insertion_point(destructor:trace.Read)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Read::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}
void Read::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Read::Clear() {
// @@protoc_insertion_point(message_clear_start:trace.Read)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Read::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Read::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Read, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Read_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .trace.Data data = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Read, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .trace.Data data = 1;
    {PROTOBUF_FIELD_OFFSET(Read, _impl_.data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::trace::Data>()},
  }}, {{
  }},
};

::uint8_t* Read::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trace.Read)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .trace.Data data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trace.Read)
  return target;
}

::size_t Read::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trace.Read)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trace.Data data = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Read::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Read::MergeImpl
};
const ::google::protobuf::Message::ClassData*Read::GetClassData() const { return &_class_data_; }


void Read::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Read*>(&to_msg);
  auto& from = static_cast<const Read&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:trace.Read)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_data()->::trace::Data::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Read::CopyFrom(const Read& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trace.Read)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Read::IsInitialized() const {
  return true;
}

void Read::InternalSwap(Read* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.data_, other->_impl_.data_);
}

::google::protobuf::Metadata Read::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trace_2eproto_getter, &descriptor_table_trace_2eproto_once,
      file_level_metadata_trace_2eproto[2]);
}
// ===================================================================

class SocketAddress::_Internal {
 public:
};

SocketAddress::SocketAddress(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:trace.SocketAddress)
}
SocketAddress::SocketAddress(const SocketAddress& from) : ::google::protobuf::Message() {
  SocketAddress* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){},
      decltype(_impl_.port_value_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _this->_impl_.port_value_ = from._impl_.port_value_;

  // @@protoc_insertion_point(copy_constructor:trace.SocketAddress)
}
inline void SocketAddress::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){},
      decltype(_impl_.port_value_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
SocketAddress::~SocketAddress() {
  // @@protoc_insertion_point(destructor:trace.SocketAddress)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SocketAddress::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}
void SocketAddress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SocketAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:trace.SocketAddress)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.port_value_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SocketAddress::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 35, 2> SocketAddress::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SocketAddress_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 port_value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SocketAddress, _impl_.port_value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SocketAddress, _impl_.port_value_)}},
    // string address = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SocketAddress, _impl_.address_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string address = 1;
    {PROTOBUF_FIELD_OFFSET(SocketAddress, _impl_.address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 port_value = 2;
    {PROTOBUF_FIELD_OFFSET(SocketAddress, _impl_.port_value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\23\7\0\0\0\0\0\0"
    "trace.SocketAddress"
    "address"
  }},
};

::uint8_t* SocketAddress::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trace.SocketAddress)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "trace.SocketAddress.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 port_value = 2;
  if (this->_internal_port_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_port_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trace.SocketAddress)
  return target;
}

::size_t SocketAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trace.SocketAddress)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // int32 port_value = 2;
  if (this->_internal_port_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_port_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SocketAddress::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SocketAddress::MergeImpl
};
const ::google::protobuf::Message::ClassData*SocketAddress::GetClassData() const { return &_class_data_; }


void SocketAddress::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SocketAddress*>(&to_msg);
  auto& from = static_cast<const SocketAddress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:trace.SocketAddress)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_port_value() != 0) {
    _this->_internal_set_port_value(from._internal_port_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SocketAddress::CopyFrom(const SocketAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trace.SocketAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SocketAddress::IsInitialized() const {
  return true;
}

void SocketAddress::InternalSwap(SocketAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
        swap(_impl_.port_value_, other->_impl_.port_value_);
}

::google::protobuf::Metadata SocketAddress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trace_2eproto_getter, &descriptor_table_trace_2eproto_once,
      file_level_metadata_trace_2eproto[3]);
}
// ===================================================================

class Connection::_Internal {
 public:
  using HasBits = decltype(std::declval<Connection>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Connection, _impl_._has_bits_);
  static const ::trace::SocketAddress& local_address(const Connection* msg);
  static void set_has_local_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::trace::SocketAddress& remote_address(const Connection* msg);
  static void set_has_remote_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::trace::SocketAddress& Connection::_Internal::local_address(const Connection* msg) {
  return *msg->_impl_.local_address_;
}
const ::trace::SocketAddress& Connection::_Internal::remote_address(const Connection* msg) {
  return *msg->_impl_.remote_address_;
}
Connection::Connection(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:trace.Connection)
}
Connection::Connection(const Connection& from) : ::google::protobuf::Message() {
  Connection* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.local_address_){nullptr},
      decltype(_impl_.remote_address_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.local_address_ = new ::trace::SocketAddress(*from._impl_.local_address_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.remote_address_ = new ::trace::SocketAddress(*from._impl_.remote_address_);
  }

  // @@protoc_insertion_point(copy_constructor:trace.Connection)
}
inline void Connection::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.local_address_){nullptr},
      decltype(_impl_.remote_address_){nullptr},
  };
}
Connection::~Connection() {
  // @@protoc_insertion_point(destructor:trace.Connection)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Connection::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.local_address_;
  if (this != internal_default_instance()) delete _impl_.remote_address_;
}
void Connection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:trace.Connection)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.local_address_ != nullptr);
      _impl_.local_address_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.remote_address_ != nullptr);
      _impl_.remote_address_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Connection::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Connection::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Connection, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Connection_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .trace.SocketAddress remote_address = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Connection, _impl_.remote_address_)}},
    // .trace.SocketAddress local_address = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Connection, _impl_.local_address_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .trace.SocketAddress local_address = 1;
    {PROTOBUF_FIELD_OFFSET(Connection, _impl_.local_address_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .trace.SocketAddress remote_address = 2;
    {PROTOBUF_FIELD_OFFSET(Connection, _impl_.remote_address_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::trace::SocketAddress>()},
    {::_pbi::TcParser::GetTable<::trace::SocketAddress>()},
  }}, {{
  }},
};

::uint8_t* Connection::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trace.Connection)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .trace.SocketAddress local_address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::local_address(this),
        _Internal::local_address(this).GetCachedSize(), target, stream);
  }

  // .trace.SocketAddress remote_address = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::remote_address(this),
        _Internal::remote_address(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trace.Connection)
  return target;
}

::size_t Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trace.Connection)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .trace.SocketAddress local_address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.local_address_);
    }

    // .trace.SocketAddress remote_address = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.remote_address_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Connection::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Connection::MergeImpl
};
const ::google::protobuf::Message::ClassData*Connection::GetClassData() const { return &_class_data_; }


void Connection::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Connection*>(&to_msg);
  auto& from = static_cast<const Connection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:trace.Connection)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_local_address()->::trace::SocketAddress::MergeFrom(
          from._internal_local_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_remote_address()->::trace::SocketAddress::MergeFrom(
          from._internal_remote_address());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Connection::CopyFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trace.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Connection::IsInitialized() const {
  return true;
}

void Connection::InternalSwap(Connection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Connection, _impl_.remote_address_)
      + sizeof(Connection::_impl_.remote_address_)
      - PROTOBUF_FIELD_OFFSET(Connection, _impl_.local_address_)>(
          reinterpret_cast<char*>(&_impl_.local_address_),
          reinterpret_cast<char*>(&other->_impl_.local_address_));
}

::google::protobuf::Metadata Connection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trace_2eproto_getter, &descriptor_table_trace_2eproto_once,
      file_level_metadata_trace_2eproto[4]);
}
// ===================================================================

class Event::_Internal {
 public:
  using HasBits = decltype(std::declval<Event>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Event, _impl_._has_bits_);
  static const ::trace::Timestamp& timestamp(const Event* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::trace::Read& read(const Event* msg);
  static void set_has_read(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::trace::Connection& connection(const Event* msg);
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::trace::Timestamp& Event::_Internal::timestamp(const Event* msg) {
  return *msg->_impl_.timestamp_;
}
const ::trace::Read& Event::_Internal::read(const Event* msg) {
  return *msg->_impl_.read_;
}
const ::trace::Connection& Event::_Internal::connection(const Event* msg) {
  return *msg->_impl_.connection_;
}
Event::Event(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:trace.Event)
}
Event::Event(const Event& from) : ::google::protobuf::Message() {
  Event* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.timestamp_){nullptr},
      decltype(_impl_.read_){nullptr},
      decltype(_impl_.connection_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ = new ::trace::Timestamp(*from._impl_.timestamp_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.read_ = new ::trace::Read(*from._impl_.read_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.connection_ = new ::trace::Connection(*from._impl_.connection_);
  }

  // @@protoc_insertion_point(copy_constructor:trace.Event)
}
inline void Event::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.timestamp_){nullptr},
      decltype(_impl_.read_){nullptr},
      decltype(_impl_.connection_){nullptr},
  };
}
Event::~Event() {
  // @@protoc_insertion_point(destructor:trace.Event)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Event::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.read_;
  if (this != internal_default_instance()) delete _impl_.connection_;
}
void Event::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:trace.Event)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.read_ != nullptr);
      _impl_.read_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.connection_ != nullptr);
      _impl_.connection_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Event::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> Event::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Event, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Event_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .trace.Timestamp timestamp = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.timestamp_)}},
    // .trace.Read read = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Event, _impl_.read_)}},
    // .trace.Connection connection = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Event, _impl_.connection_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .trace.Timestamp timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .trace.Read read = 2;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.read_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .trace.Connection connection = 3;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.connection_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::trace::Timestamp>()},
    {::_pbi::TcParser::GetTable<::trace::Read>()},
    {::_pbi::TcParser::GetTable<::trace::Connection>()},
  }}, {{
  }},
};

::uint8_t* Event::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trace.Event)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .trace.Timestamp timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .trace.Read read = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::read(this),
        _Internal::read(this).GetCachedSize(), target, stream);
  }

  // .trace.Connection connection = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::connection(this),
        _Internal::connection(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trace.Event)
  return target;
}

::size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trace.Event)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .trace.Timestamp timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.timestamp_);
    }

    // .trace.Read read = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.read_);
    }

    // .trace.Connection connection = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.connection_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Event::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Event::MergeImpl
};
const ::google::protobuf::Message::ClassData*Event::GetClassData() const { return &_class_data_; }


void Event::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Event*>(&to_msg);
  auto& from = static_cast<const Event&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:trace.Event)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_timestamp()->::trace::Timestamp::MergeFrom(
          from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_read()->::trace::Read::MergeFrom(
          from._internal_read());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_connection()->::trace::Connection::MergeFrom(
          from._internal_connection());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trace.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, _impl_.connection_)
      + sizeof(Event::_impl_.connection_)
      - PROTOBUF_FIELD_OFFSET(Event, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata Event::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trace_2eproto_getter, &descriptor_table_trace_2eproto_once,
      file_level_metadata_trace_2eproto[5]);
}
// ===================================================================

class SocketStreamedTraceSegment::_Internal {
 public:
  using HasBits = decltype(std::declval<SocketStreamedTraceSegment>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SocketStreamedTraceSegment, _impl_._has_bits_);
  static const ::trace::Event& event(const SocketStreamedTraceSegment* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::trace::Event& SocketStreamedTraceSegment::_Internal::event(const SocketStreamedTraceSegment* msg) {
  return *msg->_impl_.event_;
}
SocketStreamedTraceSegment::SocketStreamedTraceSegment(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:trace.SocketStreamedTraceSegment)
}
SocketStreamedTraceSegment::SocketStreamedTraceSegment(const SocketStreamedTraceSegment& from) : ::google::protobuf::Message() {
  SocketStreamedTraceSegment* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.event_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.event_ = new ::trace::Event(*from._impl_.event_);
  }

  // @@protoc_insertion_point(copy_constructor:trace.SocketStreamedTraceSegment)
}
inline void SocketStreamedTraceSegment::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.event_){nullptr},
  };
}
SocketStreamedTraceSegment::~SocketStreamedTraceSegment() {
  // @@protoc_insertion_point(destructor:trace.SocketStreamedTraceSegment)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SocketStreamedTraceSegment::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.event_;
}
void SocketStreamedTraceSegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SocketStreamedTraceSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:trace.SocketStreamedTraceSegment)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.event_ != nullptr);
    _impl_.event_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SocketStreamedTraceSegment::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SocketStreamedTraceSegment::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SocketStreamedTraceSegment, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SocketStreamedTraceSegment_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .trace.Event event = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SocketStreamedTraceSegment, _impl_.event_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .trace.Event event = 1;
    {PROTOBUF_FIELD_OFFSET(SocketStreamedTraceSegment, _impl_.event_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::trace::Event>()},
  }}, {{
  }},
};

::uint8_t* SocketStreamedTraceSegment::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trace.SocketStreamedTraceSegment)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .trace.Event event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::event(this),
        _Internal::event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trace.SocketStreamedTraceSegment)
  return target;
}

::size_t SocketStreamedTraceSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trace.SocketStreamedTraceSegment)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trace.Event event = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.event_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SocketStreamedTraceSegment::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SocketStreamedTraceSegment::MergeImpl
};
const ::google::protobuf::Message::ClassData*SocketStreamedTraceSegment::GetClassData() const { return &_class_data_; }


void SocketStreamedTraceSegment::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SocketStreamedTraceSegment*>(&to_msg);
  auto& from = static_cast<const SocketStreamedTraceSegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:trace.SocketStreamedTraceSegment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_event()->::trace::Event::MergeFrom(
        from._internal_event());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SocketStreamedTraceSegment::CopyFrom(const SocketStreamedTraceSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trace.SocketStreamedTraceSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SocketStreamedTraceSegment::IsInitialized() const {
  return true;
}

void SocketStreamedTraceSegment::InternalSwap(SocketStreamedTraceSegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.event_, other->_impl_.event_);
}

::google::protobuf::Metadata SocketStreamedTraceSegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trace_2eproto_getter, &descriptor_table_trace_2eproto_once,
      file_level_metadata_trace_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace trace
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
