// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trace2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trace2_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_trace2_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_trace2_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_trace2_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_trace2_2eproto;
namespace trace2 {
class Address;
struct AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class Body;
struct BodyDefaultTypeInternal;
extern BodyDefaultTypeInternal _Body_default_instance_;
class Connection;
struct ConnectionDefaultTypeInternal;
extern ConnectionDefaultTypeInternal _Connection_default_instance_;
class EnvoyInternalAddress;
struct EnvoyInternalAddressDefaultTypeInternal;
extern EnvoyInternalAddressDefaultTypeInternal _EnvoyInternalAddress_default_instance_;
class Pipe;
struct PipeDefaultTypeInternal;
extern PipeDefaultTypeInternal _Pipe_default_instance_;
class SocketAddress;
struct SocketAddressDefaultTypeInternal;
extern SocketAddressDefaultTypeInternal _SocketAddress_default_instance_;
class SocketBufferedTrace;
struct SocketBufferedTraceDefaultTypeInternal;
extern SocketBufferedTraceDefaultTypeInternal _SocketBufferedTrace_default_instance_;
class SocketEvent;
struct SocketEventDefaultTypeInternal;
extern SocketEventDefaultTypeInternal _SocketEvent_default_instance_;
class SocketEvent_Closed;
struct SocketEvent_ClosedDefaultTypeInternal;
extern SocketEvent_ClosedDefaultTypeInternal _SocketEvent_Closed_default_instance_;
class SocketEvent_Read;
struct SocketEvent_ReadDefaultTypeInternal;
extern SocketEvent_ReadDefaultTypeInternal _SocketEvent_Read_default_instance_;
class SocketEvent_Write;
struct SocketEvent_WriteDefaultTypeInternal;
extern SocketEvent_WriteDefaultTypeInternal _SocketEvent_Write_default_instance_;
class SocketStreamedTraceSegment;
struct SocketStreamedTraceSegmentDefaultTypeInternal;
extern SocketStreamedTraceSegmentDefaultTypeInternal _SocketStreamedTraceSegment_default_instance_;
class Timestamp;
struct TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
class TraceWrapper;
struct TraceWrapperDefaultTypeInternal;
extern TraceWrapperDefaultTypeInternal _TraceWrapper_default_instance_;
}  // namespace trace2
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace trace2 {
enum SocketAddress_Protocol : int {
  SocketAddress_Protocol_TCP = 0,
  SocketAddress_Protocol_UDP = 1,
  SocketAddress_Protocol_SocketAddress_Protocol_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SocketAddress_Protocol_SocketAddress_Protocol_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SocketAddress_Protocol_IsValid(int value);
constexpr SocketAddress_Protocol SocketAddress_Protocol_Protocol_MIN = static_cast<SocketAddress_Protocol>(0);
constexpr SocketAddress_Protocol SocketAddress_Protocol_Protocol_MAX = static_cast<SocketAddress_Protocol>(1);
constexpr int SocketAddress_Protocol_Protocol_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
SocketAddress_Protocol_descriptor();
template <typename T>
const std::string& SocketAddress_Protocol_Name(T value) {
  static_assert(std::is_same<T, SocketAddress_Protocol>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Protocol_Name().");
  return SocketAddress_Protocol_Name(static_cast<SocketAddress_Protocol>(value));
}
template <>
inline const std::string& SocketAddress_Protocol_Name(SocketAddress_Protocol value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SocketAddress_Protocol_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool SocketAddress_Protocol_Parse(absl::string_view name, SocketAddress_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SocketAddress_Protocol>(
      SocketAddress_Protocol_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Body final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace2.Body) */ {
 public:
  inline Body() : Body(nullptr) {}
  ~Body() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Body(::google::protobuf::internal::ConstantInitialized);

  Body(const Body& from);
  Body(Body&& from) noexcept
    : Body() {
    *this = ::std::move(from);
  }

  inline Body& operator=(const Body& from) {
    CopyFrom(from);
    return *this;
  }
  inline Body& operator=(Body&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Body& default_instance() {
    return *internal_default_instance();
  }
  enum BodyTypeCase {
    kAsBytes = 1,
    kAsString = 2,
    BODY_TYPE_NOT_SET = 0,
  };

  static inline const Body* internal_default_instance() {
    return reinterpret_cast<const Body*>(
               &_Body_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Body& a, Body& b) {
    a.Swap(&b);
  }
  inline void Swap(Body* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Body* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Body* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Body>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Body& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Body& from) {
    Body::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Body* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace2.Body";
  }
  protected:
  explicit Body(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTruncatedFieldNumber = 3,
    kAsBytesFieldNumber = 1,
    kAsStringFieldNumber = 2,
  };
  // bool truncated = 3;
  void clear_truncated() ;
  bool truncated() const;
  void set_truncated(bool value);

  private:
  bool _internal_truncated() const;
  void _internal_set_truncated(bool value);

  public:
  // bytes as_bytes = 1;
  bool has_as_bytes() const;
  void clear_as_bytes() ;
  const std::string& as_bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_as_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_as_bytes();
  PROTOBUF_NODISCARD std::string* release_as_bytes();
  void set_allocated_as_bytes(std::string* ptr);

  private:
  const std::string& _internal_as_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_as_bytes(
      const std::string& value);
  std::string* _internal_mutable_as_bytes();

  public:
  // string as_string = 2;
  bool has_as_string() const;
  void clear_as_string() ;
  const std::string& as_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_as_string(Arg_&& arg, Args_... args);
  std::string* mutable_as_string();
  PROTOBUF_NODISCARD std::string* release_as_string();
  void set_allocated_as_string(std::string* ptr);

  private:
  const std::string& _internal_as_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_as_string(
      const std::string& value);
  std::string* _internal_mutable_as_string();

  public:
  void clear_body_type();
  BodyTypeCase body_type_case() const;
  // @@protoc_insertion_point(class_scope:trace2.Body)
 private:
  class _Internal;
  void set_has_as_bytes();
  void set_has_as_string();

  inline bool has_body_type() const;
  inline void clear_has_body_type();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 3, 0, 29, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool truncated_;
    union BodyTypeUnion {
      constexpr BodyTypeUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr as_bytes_;
      ::google::protobuf::internal::ArenaStringPtr as_string_;
    } body_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace2_2eproto;
};// -------------------------------------------------------------------

class SocketAddress final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace2.SocketAddress) */ {
 public:
  inline SocketAddress() : SocketAddress(nullptr) {}
  ~SocketAddress() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SocketAddress(::google::protobuf::internal::ConstantInitialized);

  SocketAddress(const SocketAddress& from);
  SocketAddress(SocketAddress&& from) noexcept
    : SocketAddress() {
    *this = ::std::move(from);
  }

  inline SocketAddress& operator=(const SocketAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocketAddress& operator=(SocketAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SocketAddress& default_instance() {
    return *internal_default_instance();
  }
  enum PortSpecifierCase {
    kPortValue = 3,
    kNamedPort = 4,
    PORT_SPECIFIER_NOT_SET = 0,
  };

  static inline const SocketAddress* internal_default_instance() {
    return reinterpret_cast<const SocketAddress*>(
               &_SocketAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SocketAddress& a, SocketAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(SocketAddress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocketAddress* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SocketAddress* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SocketAddress>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SocketAddress& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SocketAddress& from) {
    SocketAddress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SocketAddress* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace2.SocketAddress";
  }
  protected:
  explicit SocketAddress(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Protocol = SocketAddress_Protocol;
  static constexpr Protocol TCP = SocketAddress_Protocol_TCP;
  static constexpr Protocol UDP = SocketAddress_Protocol_UDP;
  static inline bool Protocol_IsValid(int value) {
    return SocketAddress_Protocol_IsValid(value);
  }
  static constexpr Protocol Protocol_MIN = SocketAddress_Protocol_Protocol_MIN;
  static constexpr Protocol Protocol_MAX = SocketAddress_Protocol_Protocol_MAX;
  static constexpr int Protocol_ARRAYSIZE = SocketAddress_Protocol_Protocol_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Protocol_descriptor() {
    return SocketAddress_Protocol_descriptor();
  }
  template <typename T>
  static inline const std::string& Protocol_Name(T value) {
    return SocketAddress_Protocol_Name(value);
  }
  static inline bool Protocol_Parse(absl::string_view name, Protocol* value) {
    return SocketAddress_Protocol_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kResolverNameFieldNumber = 5,
    kProtocolFieldNumber = 1,
    kIpv4CompatFieldNumber = 6,
    kPortValueFieldNumber = 3,
    kNamedPortFieldNumber = 4,
  };
  // string address = 2;
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // string resolver_name = 5;
  void clear_resolver_name() ;
  const std::string& resolver_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_resolver_name(Arg_&& arg, Args_... args);
  std::string* mutable_resolver_name();
  PROTOBUF_NODISCARD std::string* release_resolver_name();
  void set_allocated_resolver_name(std::string* ptr);

  private:
  const std::string& _internal_resolver_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resolver_name(
      const std::string& value);
  std::string* _internal_mutable_resolver_name();

  public:
  // .trace2.SocketAddress.Protocol protocol = 1;
  void clear_protocol() ;
  ::trace2::SocketAddress_Protocol protocol() const;
  void set_protocol(::trace2::SocketAddress_Protocol value);

  private:
  ::trace2::SocketAddress_Protocol _internal_protocol() const;
  void _internal_set_protocol(::trace2::SocketAddress_Protocol value);

  public:
  // bool ipv4_compat = 6;
  void clear_ipv4_compat() ;
  bool ipv4_compat() const;
  void set_ipv4_compat(bool value);

  private:
  bool _internal_ipv4_compat() const;
  void _internal_set_ipv4_compat(bool value);

  public:
  // uint32 port_value = 3;
  bool has_port_value() const;
  void clear_port_value() ;
  ::uint32_t port_value() const;
  void set_port_value(::uint32_t value);

  private:
  ::uint32_t _internal_port_value() const;
  void _internal_set_port_value(::uint32_t value);

  public:
  // string named_port = 4;
  bool has_named_port() const;
  void clear_named_port() ;
  const std::string& named_port() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_named_port(Arg_&& arg, Args_... args);
  std::string* mutable_named_port();
  PROTOBUF_NODISCARD std::string* release_named_port();
  void set_allocated_named_port(std::string* ptr);

  private:
  const std::string& _internal_named_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_named_port(
      const std::string& value);
  std::string* _internal_mutable_named_port();

  public:
  void clear_port_specifier();
  PortSpecifierCase port_specifier_case() const;
  // @@protoc_insertion_point(class_scope:trace2.SocketAddress)
 private:
  class _Internal;
  void set_has_port_value();
  void set_has_named_port();

  inline bool has_port_specifier() const;
  inline void clear_has_port_specifier();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 0, 59, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::google::protobuf::internal::ArenaStringPtr resolver_name_;
    int protocol_;
    bool ipv4_compat_;
    union PortSpecifierUnion {
      constexpr PortSpecifierUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::uint32_t port_value_;
      ::google::protobuf::internal::ArenaStringPtr named_port_;
    } port_specifier_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace2_2eproto;
};// -------------------------------------------------------------------

class Pipe final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace2.Pipe) */ {
 public:
  inline Pipe() : Pipe(nullptr) {}
  ~Pipe() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Pipe(::google::protobuf::internal::ConstantInitialized);

  Pipe(const Pipe& from);
  Pipe(Pipe&& from) noexcept
    : Pipe() {
    *this = ::std::move(from);
  }

  inline Pipe& operator=(const Pipe& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pipe& operator=(Pipe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pipe& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pipe* internal_default_instance() {
    return reinterpret_cast<const Pipe*>(
               &_Pipe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Pipe& a, Pipe& b) {
    a.Swap(&b);
  }
  inline void Swap(Pipe* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pipe* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pipe* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pipe>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Pipe& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Pipe& from) {
    Pipe::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pipe* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace2.Pipe";
  }
  protected:
  explicit Pipe(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // string path = 1;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // uint32 mode = 2;
  void clear_mode() ;
  ::uint32_t mode() const;
  void set_mode(::uint32_t value);

  private:
  ::uint32_t _internal_mode() const;
  void _internal_set_mode(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:trace2.Pipe)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 24, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::uint32_t mode_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace2_2eproto;
};// -------------------------------------------------------------------

class EnvoyInternalAddress final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace2.EnvoyInternalAddress) */ {
 public:
  inline EnvoyInternalAddress() : EnvoyInternalAddress(nullptr) {}
  ~EnvoyInternalAddress() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EnvoyInternalAddress(::google::protobuf::internal::ConstantInitialized);

  EnvoyInternalAddress(const EnvoyInternalAddress& from);
  EnvoyInternalAddress(EnvoyInternalAddress&& from) noexcept
    : EnvoyInternalAddress() {
    *this = ::std::move(from);
  }

  inline EnvoyInternalAddress& operator=(const EnvoyInternalAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvoyInternalAddress& operator=(EnvoyInternalAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnvoyInternalAddress& default_instance() {
    return *internal_default_instance();
  }
  enum AddressNameSpecifierCase {
    kServerListenerName = 1,
    ADDRESS_NAME_SPECIFIER_NOT_SET = 0,
  };

  static inline const EnvoyInternalAddress* internal_default_instance() {
    return reinterpret_cast<const EnvoyInternalAddress*>(
               &_EnvoyInternalAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EnvoyInternalAddress& a, EnvoyInternalAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvoyInternalAddress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvoyInternalAddress* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnvoyInternalAddress* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnvoyInternalAddress>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EnvoyInternalAddress& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EnvoyInternalAddress& from) {
    EnvoyInternalAddress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvoyInternalAddress* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace2.EnvoyInternalAddress";
  }
  protected:
  explicit EnvoyInternalAddress(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndpointIdFieldNumber = 2,
    kServerListenerNameFieldNumber = 1,
  };
  // string endpoint_id = 2;
  void clear_endpoint_id() ;
  const std::string& endpoint_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_endpoint_id(Arg_&& arg, Args_... args);
  std::string* mutable_endpoint_id();
  PROTOBUF_NODISCARD std::string* release_endpoint_id();
  void set_allocated_endpoint_id(std::string* ptr);

  private:
  const std::string& _internal_endpoint_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_endpoint_id(
      const std::string& value);
  std::string* _internal_mutable_endpoint_id();

  public:
  // string server_listener_name = 1;
  bool has_server_listener_name() const;
  void clear_server_listener_name() ;
  const std::string& server_listener_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_server_listener_name(Arg_&& arg, Args_... args);
  std::string* mutable_server_listener_name();
  PROTOBUF_NODISCARD std::string* release_server_listener_name();
  void set_allocated_server_listener_name(std::string* ptr);

  private:
  const std::string& _internal_server_listener_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_listener_name(
      const std::string& value);
  std::string* _internal_mutable_server_listener_name();

  public:
  void clear_address_name_specifier();
  AddressNameSpecifierCase address_name_specifier_case() const;
  // @@protoc_insertion_point(class_scope:trace2.EnvoyInternalAddress)
 private:
  class _Internal;
  void set_has_server_listener_name();

  inline bool has_address_name_specifier() const;
  inline void clear_has_address_name_specifier();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2, 0, 67, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr endpoint_id_;
    union AddressNameSpecifierUnion {
      constexpr AddressNameSpecifierUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr server_listener_name_;
    } address_name_specifier_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace2_2eproto;
};// -------------------------------------------------------------------

class Address final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace2.Address) */ {
 public:
  inline Address() : Address(nullptr) {}
  ~Address() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Address(::google::protobuf::internal::ConstantInitialized);

  Address(const Address& from);
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address& operator=(Address&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Address& default_instance() {
    return *internal_default_instance();
  }
  enum AddressCase {
    kSocketAddress = 1,
    kPipe = 2,
    kEnvoyInternalAddress = 3,
    ADDRESS_NOT_SET = 0,
  };

  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }
  inline void Swap(Address* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Address* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Address* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Address& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Address& from) {
    Address::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace2.Address";
  }
  protected:
  explicit Address(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSocketAddressFieldNumber = 1,
    kPipeFieldNumber = 2,
    kEnvoyInternalAddressFieldNumber = 3,
  };
  // .trace2.SocketAddress socket_address = 1;
  bool has_socket_address() const;
  private:
  bool _internal_has_socket_address() const;

  public:
  void clear_socket_address() ;
  const ::trace2::SocketAddress& socket_address() const;
  PROTOBUF_NODISCARD ::trace2::SocketAddress* release_socket_address();
  ::trace2::SocketAddress* mutable_socket_address();
  void set_allocated_socket_address(::trace2::SocketAddress* value);
  void unsafe_arena_set_allocated_socket_address(::trace2::SocketAddress* value);
  ::trace2::SocketAddress* unsafe_arena_release_socket_address();

  private:
  const ::trace2::SocketAddress& _internal_socket_address() const;
  ::trace2::SocketAddress* _internal_mutable_socket_address();

  public:
  // .trace2.Pipe pipe = 2;
  bool has_pipe() const;
  private:
  bool _internal_has_pipe() const;

  public:
  void clear_pipe() ;
  const ::trace2::Pipe& pipe() const;
  PROTOBUF_NODISCARD ::trace2::Pipe* release_pipe();
  ::trace2::Pipe* mutable_pipe();
  void set_allocated_pipe(::trace2::Pipe* value);
  void unsafe_arena_set_allocated_pipe(::trace2::Pipe* value);
  ::trace2::Pipe* unsafe_arena_release_pipe();

  private:
  const ::trace2::Pipe& _internal_pipe() const;
  ::trace2::Pipe* _internal_mutable_pipe();

  public:
  // .trace2.EnvoyInternalAddress envoy_internal_address = 3;
  bool has_envoy_internal_address() const;
  private:
  bool _internal_has_envoy_internal_address() const;

  public:
  void clear_envoy_internal_address() ;
  const ::trace2::EnvoyInternalAddress& envoy_internal_address() const;
  PROTOBUF_NODISCARD ::trace2::EnvoyInternalAddress* release_envoy_internal_address();
  ::trace2::EnvoyInternalAddress* mutable_envoy_internal_address();
  void set_allocated_envoy_internal_address(::trace2::EnvoyInternalAddress* value);
  void unsafe_arena_set_allocated_envoy_internal_address(::trace2::EnvoyInternalAddress* value);
  ::trace2::EnvoyInternalAddress* unsafe_arena_release_envoy_internal_address();

  private:
  const ::trace2::EnvoyInternalAddress& _internal_envoy_internal_address() const;
  ::trace2::EnvoyInternalAddress* _internal_mutable_envoy_internal_address();

  public:
  void clear_address();
  AddressCase address_case() const;
  // @@protoc_insertion_point(class_scope:trace2.Address)
 private:
  class _Internal;
  void set_has_socket_address();
  void set_has_pipe();
  void set_has_envoy_internal_address();

  inline bool has_address() const;
  inline void clear_has_address();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 3, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union AddressUnion {
      constexpr AddressUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::trace2::SocketAddress* socket_address_;
      ::trace2::Pipe* pipe_;
      ::trace2::EnvoyInternalAddress* envoy_internal_address_;
    } address_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace2_2eproto;
};// -------------------------------------------------------------------

class Connection final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace2.Connection) */ {
 public:
  inline Connection() : Connection(nullptr) {}
  ~Connection() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Connection(::google::protobuf::internal::ConstantInitialized);

  Connection(const Connection& from);
  Connection(Connection&& from) noexcept
    : Connection() {
    *this = ::std::move(from);
  }

  inline Connection& operator=(const Connection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Connection& operator=(Connection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Connection& default_instance() {
    return *internal_default_instance();
  }
  static inline const Connection* internal_default_instance() {
    return reinterpret_cast<const Connection*>(
               &_Connection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Connection& a, Connection& b) {
    a.Swap(&b);
  }
  inline void Swap(Connection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Connection* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Connection* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Connection>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Connection& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Connection& from) {
    Connection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Connection* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace2.Connection";
  }
  protected:
  explicit Connection(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalAddressFieldNumber = 1,
    kRemoteAddressFieldNumber = 2,
  };
  // .trace2.Address local_address = 1;
  bool has_local_address() const;
  void clear_local_address() ;
  const ::trace2::Address& local_address() const;
  PROTOBUF_NODISCARD ::trace2::Address* release_local_address();
  ::trace2::Address* mutable_local_address();
  void set_allocated_local_address(::trace2::Address* value);
  void unsafe_arena_set_allocated_local_address(::trace2::Address* value);
  ::trace2::Address* unsafe_arena_release_local_address();

  private:
  const ::trace2::Address& _internal_local_address() const;
  ::trace2::Address* _internal_mutable_local_address();

  public:
  // .trace2.Address remote_address = 2;
  bool has_remote_address() const;
  void clear_remote_address() ;
  const ::trace2::Address& remote_address() const;
  PROTOBUF_NODISCARD ::trace2::Address* release_remote_address();
  ::trace2::Address* mutable_remote_address();
  void set_allocated_remote_address(::trace2::Address* value);
  void unsafe_arena_set_allocated_remote_address(::trace2::Address* value);
  ::trace2::Address* unsafe_arena_release_remote_address();

  private:
  const ::trace2::Address& _internal_remote_address() const;
  ::trace2::Address* _internal_mutable_remote_address();

  public:
  // @@protoc_insertion_point(class_scope:trace2.Connection)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::trace2::Address* local_address_;
    ::trace2::Address* remote_address_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace2_2eproto;
};// -------------------------------------------------------------------

class Timestamp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace2.Timestamp) */ {
 public:
  inline Timestamp() : Timestamp(nullptr) {}
  ~Timestamp() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Timestamp(::google::protobuf::internal::ConstantInitialized);

  Timestamp(const Timestamp& from);
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Timestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Timestamp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timestamp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Timestamp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Timestamp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Timestamp& from) {
    Timestamp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace2.Timestamp";
  }
  protected:
  explicit Timestamp(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kNanosFieldNumber = 2,
  };
  // int64 seconds = 1;
  void clear_seconds() ;
  ::int64_t seconds() const;
  void set_seconds(::int64_t value);

  private:
  ::int64_t _internal_seconds() const;
  void _internal_set_seconds(::int64_t value);

  public:
  // int32 nanos = 2;
  void clear_nanos() ;
  ::int32_t nanos() const;
  void set_nanos(::int32_t value);

  private:
  ::int32_t _internal_nanos() const;
  void _internal_set_nanos(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:trace2.Timestamp)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t seconds_;
    ::int32_t nanos_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace2_2eproto;
};// -------------------------------------------------------------------

class SocketEvent_Read final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace2.SocketEvent.Read) */ {
 public:
  inline SocketEvent_Read() : SocketEvent_Read(nullptr) {}
  ~SocketEvent_Read() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SocketEvent_Read(::google::protobuf::internal::ConstantInitialized);

  SocketEvent_Read(const SocketEvent_Read& from);
  SocketEvent_Read(SocketEvent_Read&& from) noexcept
    : SocketEvent_Read() {
    *this = ::std::move(from);
  }

  inline SocketEvent_Read& operator=(const SocketEvent_Read& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocketEvent_Read& operator=(SocketEvent_Read&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SocketEvent_Read& default_instance() {
    return *internal_default_instance();
  }
  static inline const SocketEvent_Read* internal_default_instance() {
    return reinterpret_cast<const SocketEvent_Read*>(
               &_SocketEvent_Read_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SocketEvent_Read& a, SocketEvent_Read& b) {
    a.Swap(&b);
  }
  inline void Swap(SocketEvent_Read* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocketEvent_Read* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SocketEvent_Read* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SocketEvent_Read>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SocketEvent_Read& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SocketEvent_Read& from) {
    SocketEvent_Read::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SocketEvent_Read* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace2.SocketEvent.Read";
  }
  protected:
  explicit SocketEvent_Read(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .trace2.Body data = 1;
  bool has_data() const;
  void clear_data() ;
  const ::trace2::Body& data() const;
  PROTOBUF_NODISCARD ::trace2::Body* release_data();
  ::trace2::Body* mutable_data();
  void set_allocated_data(::trace2::Body* value);
  void unsafe_arena_set_allocated_data(::trace2::Body* value);
  ::trace2::Body* unsafe_arena_release_data();

  private:
  const ::trace2::Body& _internal_data() const;
  ::trace2::Body* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:trace2.SocketEvent.Read)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::trace2::Body* data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace2_2eproto;
};// -------------------------------------------------------------------

class SocketEvent_Write final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace2.SocketEvent.Write) */ {
 public:
  inline SocketEvent_Write() : SocketEvent_Write(nullptr) {}
  ~SocketEvent_Write() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SocketEvent_Write(::google::protobuf::internal::ConstantInitialized);

  SocketEvent_Write(const SocketEvent_Write& from);
  SocketEvent_Write(SocketEvent_Write&& from) noexcept
    : SocketEvent_Write() {
    *this = ::std::move(from);
  }

  inline SocketEvent_Write& operator=(const SocketEvent_Write& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocketEvent_Write& operator=(SocketEvent_Write&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SocketEvent_Write& default_instance() {
    return *internal_default_instance();
  }
  static inline const SocketEvent_Write* internal_default_instance() {
    return reinterpret_cast<const SocketEvent_Write*>(
               &_SocketEvent_Write_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SocketEvent_Write& a, SocketEvent_Write& b) {
    a.Swap(&b);
  }
  inline void Swap(SocketEvent_Write* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocketEvent_Write* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SocketEvent_Write* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SocketEvent_Write>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SocketEvent_Write& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SocketEvent_Write& from) {
    SocketEvent_Write::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SocketEvent_Write* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace2.SocketEvent.Write";
  }
  protected:
  explicit SocketEvent_Write(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kEndStreamFieldNumber = 2,
  };
  // .trace2.Body data = 1;
  bool has_data() const;
  void clear_data() ;
  const ::trace2::Body& data() const;
  PROTOBUF_NODISCARD ::trace2::Body* release_data();
  ::trace2::Body* mutable_data();
  void set_allocated_data(::trace2::Body* value);
  void unsafe_arena_set_allocated_data(::trace2::Body* value);
  ::trace2::Body* unsafe_arena_release_data();

  private:
  const ::trace2::Body& _internal_data() const;
  ::trace2::Body* _internal_mutable_data();

  public:
  // bool end_stream = 2;
  void clear_end_stream() ;
  bool end_stream() const;
  void set_end_stream(bool value);

  private:
  bool _internal_end_stream() const;
  void _internal_set_end_stream(bool value);

  public:
  // @@protoc_insertion_point(class_scope:trace2.SocketEvent.Write)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::trace2::Body* data_;
    bool end_stream_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace2_2eproto;
};// -------------------------------------------------------------------

class SocketEvent_Closed final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:trace2.SocketEvent.Closed) */ {
 public:
  inline SocketEvent_Closed() : SocketEvent_Closed(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SocketEvent_Closed(::google::protobuf::internal::ConstantInitialized);

  SocketEvent_Closed(const SocketEvent_Closed& from);
  SocketEvent_Closed(SocketEvent_Closed&& from) noexcept
    : SocketEvent_Closed() {
    *this = ::std::move(from);
  }

  inline SocketEvent_Closed& operator=(const SocketEvent_Closed& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocketEvent_Closed& operator=(SocketEvent_Closed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SocketEvent_Closed& default_instance() {
    return *internal_default_instance();
  }
  static inline const SocketEvent_Closed* internal_default_instance() {
    return reinterpret_cast<const SocketEvent_Closed*>(
               &_SocketEvent_Closed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SocketEvent_Closed& a, SocketEvent_Closed& b) {
    a.Swap(&b);
  }
  inline void Swap(SocketEvent_Closed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocketEvent_Closed* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SocketEvent_Closed* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SocketEvent_Closed>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SocketEvent_Closed& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SocketEvent_Closed& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace2.SocketEvent.Closed";
  }
  protected:
  explicit SocketEvent_Closed(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:trace2.SocketEvent.Closed)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_trace2_2eproto;
};// -------------------------------------------------------------------

class SocketEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace2.SocketEvent) */ {
 public:
  inline SocketEvent() : SocketEvent(nullptr) {}
  ~SocketEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SocketEvent(::google::protobuf::internal::ConstantInitialized);

  SocketEvent(const SocketEvent& from);
  SocketEvent(SocketEvent&& from) noexcept
    : SocketEvent() {
    *this = ::std::move(from);
  }

  inline SocketEvent& operator=(const SocketEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocketEvent& operator=(SocketEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SocketEvent& default_instance() {
    return *internal_default_instance();
  }
  enum EventSelectorCase {
    kRead = 2,
    kWrite = 3,
    kClosed = 4,
    EVENT_SELECTOR_NOT_SET = 0,
  };

  static inline const SocketEvent* internal_default_instance() {
    return reinterpret_cast<const SocketEvent*>(
               &_SocketEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SocketEvent& a, SocketEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SocketEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocketEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SocketEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SocketEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SocketEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SocketEvent& from) {
    SocketEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SocketEvent* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace2.SocketEvent";
  }
  protected:
  explicit SocketEvent(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SocketEvent_Read Read;
  typedef SocketEvent_Write Write;
  typedef SocketEvent_Closed Closed;

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kConnectionPerEventFieldNumber = 5,
    kReadFieldNumber = 2,
    kWriteFieldNumber = 3,
    kClosedFieldNumber = 4,
  };
  // .trace2.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::trace2::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::trace2::Timestamp* release_timestamp();
  ::trace2::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::trace2::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::trace2::Timestamp* value);
  ::trace2::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::trace2::Timestamp& _internal_timestamp() const;
  ::trace2::Timestamp* _internal_mutable_timestamp();

  public:
  // .trace2.Connection connection_per_event = 5;
  bool has_connection_per_event() const;
  void clear_connection_per_event() ;
  const ::trace2::Connection& connection_per_event() const;
  PROTOBUF_NODISCARD ::trace2::Connection* release_connection_per_event();
  ::trace2::Connection* mutable_connection_per_event();
  void set_allocated_connection_per_event(::trace2::Connection* value);
  void unsafe_arena_set_allocated_connection_per_event(::trace2::Connection* value);
  ::trace2::Connection* unsafe_arena_release_connection_per_event();

  private:
  const ::trace2::Connection& _internal_connection_per_event() const;
  ::trace2::Connection* _internal_mutable_connection_per_event();

  public:
  // .trace2.SocketEvent.Read read = 2;
  bool has_read() const;
  private:
  bool _internal_has_read() const;

  public:
  void clear_read() ;
  const ::trace2::SocketEvent_Read& read() const;
  PROTOBUF_NODISCARD ::trace2::SocketEvent_Read* release_read();
  ::trace2::SocketEvent_Read* mutable_read();
  void set_allocated_read(::trace2::SocketEvent_Read* value);
  void unsafe_arena_set_allocated_read(::trace2::SocketEvent_Read* value);
  ::trace2::SocketEvent_Read* unsafe_arena_release_read();

  private:
  const ::trace2::SocketEvent_Read& _internal_read() const;
  ::trace2::SocketEvent_Read* _internal_mutable_read();

  public:
  // .trace2.SocketEvent.Write write = 3;
  bool has_write() const;
  private:
  bool _internal_has_write() const;

  public:
  void clear_write() ;
  const ::trace2::SocketEvent_Write& write() const;
  PROTOBUF_NODISCARD ::trace2::SocketEvent_Write* release_write();
  ::trace2::SocketEvent_Write* mutable_write();
  void set_allocated_write(::trace2::SocketEvent_Write* value);
  void unsafe_arena_set_allocated_write(::trace2::SocketEvent_Write* value);
  ::trace2::SocketEvent_Write* unsafe_arena_release_write();

  private:
  const ::trace2::SocketEvent_Write& _internal_write() const;
  ::trace2::SocketEvent_Write* _internal_mutable_write();

  public:
  // .trace2.SocketEvent.Closed closed = 4;
  bool has_closed() const;
  private:
  bool _internal_has_closed() const;

  public:
  void clear_closed() ;
  const ::trace2::SocketEvent_Closed& closed() const;
  PROTOBUF_NODISCARD ::trace2::SocketEvent_Closed* release_closed();
  ::trace2::SocketEvent_Closed* mutable_closed();
  void set_allocated_closed(::trace2::SocketEvent_Closed* value);
  void unsafe_arena_set_allocated_closed(::trace2::SocketEvent_Closed* value);
  ::trace2::SocketEvent_Closed* unsafe_arena_release_closed();

  private:
  const ::trace2::SocketEvent_Closed& _internal_closed() const;
  ::trace2::SocketEvent_Closed* _internal_mutable_closed();

  public:
  void clear_event_selector();
  EventSelectorCase event_selector_case() const;
  // @@protoc_insertion_point(class_scope:trace2.SocketEvent)
 private:
  class _Internal;
  void set_has_read();
  void set_has_write();
  void set_has_closed();

  inline bool has_event_selector() const;
  inline void clear_has_event_selector();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 5, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::trace2::Timestamp* timestamp_;
    ::trace2::Connection* connection_per_event_;
    union EventSelectorUnion {
      constexpr EventSelectorUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::trace2::SocketEvent_Read* read_;
      ::trace2::SocketEvent_Write* write_;
      ::trace2::SocketEvent_Closed* closed_;
    } event_selector_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace2_2eproto;
};// -------------------------------------------------------------------

class SocketBufferedTrace final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace2.SocketBufferedTrace) */ {
 public:
  inline SocketBufferedTrace() : SocketBufferedTrace(nullptr) {}
  ~SocketBufferedTrace() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SocketBufferedTrace(::google::protobuf::internal::ConstantInitialized);

  SocketBufferedTrace(const SocketBufferedTrace& from);
  SocketBufferedTrace(SocketBufferedTrace&& from) noexcept
    : SocketBufferedTrace() {
    *this = ::std::move(from);
  }

  inline SocketBufferedTrace& operator=(const SocketBufferedTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocketBufferedTrace& operator=(SocketBufferedTrace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SocketBufferedTrace& default_instance() {
    return *internal_default_instance();
  }
  static inline const SocketBufferedTrace* internal_default_instance() {
    return reinterpret_cast<const SocketBufferedTrace*>(
               &_SocketBufferedTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SocketBufferedTrace& a, SocketBufferedTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(SocketBufferedTrace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocketBufferedTrace* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SocketBufferedTrace* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SocketBufferedTrace>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SocketBufferedTrace& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SocketBufferedTrace& from) {
    SocketBufferedTrace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SocketBufferedTrace* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace2.SocketBufferedTrace";
  }
  protected:
  explicit SocketBufferedTrace(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 3,
    kConnectionFieldNumber = 2,
    kTraceIdFieldNumber = 1,
    kReadTruncatedFieldNumber = 4,
    kWriteTruncatedFieldNumber = 5,
  };
  // repeated .trace2.SocketEvent events = 3;
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::trace2::SocketEvent* mutable_events(int index);
  ::google::protobuf::RepeatedPtrField< ::trace2::SocketEvent >*
      mutable_events();
  private:
  const ::google::protobuf::RepeatedPtrField<::trace2::SocketEvent>& _internal_events() const;
  ::google::protobuf::RepeatedPtrField<::trace2::SocketEvent>* _internal_mutable_events();
  public:
  const ::trace2::SocketEvent& events(int index) const;
  ::trace2::SocketEvent* add_events();
  const ::google::protobuf::RepeatedPtrField< ::trace2::SocketEvent >&
      events() const;
  // .trace2.Connection connection = 2;
  bool has_connection() const;
  void clear_connection() ;
  const ::trace2::Connection& connection() const;
  PROTOBUF_NODISCARD ::trace2::Connection* release_connection();
  ::trace2::Connection* mutable_connection();
  void set_allocated_connection(::trace2::Connection* value);
  void unsafe_arena_set_allocated_connection(::trace2::Connection* value);
  ::trace2::Connection* unsafe_arena_release_connection();

  private:
  const ::trace2::Connection& _internal_connection() const;
  ::trace2::Connection* _internal_mutable_connection();

  public:
  // uint64 trace_id = 1;
  void clear_trace_id() ;
  ::uint64_t trace_id() const;
  void set_trace_id(::uint64_t value);

  private:
  ::uint64_t _internal_trace_id() const;
  void _internal_set_trace_id(::uint64_t value);

  public:
  // bool read_truncated = 4;
  void clear_read_truncated() ;
  bool read_truncated() const;
  void set_read_truncated(bool value);

  private:
  bool _internal_read_truncated() const;
  void _internal_set_read_truncated(bool value);

  public:
  // bool write_truncated = 5;
  void clear_write_truncated() ;
  bool write_truncated() const;
  void set_write_truncated(bool value);

  private:
  bool _internal_write_truncated() const;
  void _internal_set_write_truncated(bool value);

  public:
  // @@protoc_insertion_point(class_scope:trace2.SocketBufferedTrace)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::trace2::SocketEvent > events_;
    ::trace2::Connection* connection_;
    ::uint64_t trace_id_;
    bool read_truncated_;
    bool write_truncated_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace2_2eproto;
};// -------------------------------------------------------------------

class SocketStreamedTraceSegment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace2.SocketStreamedTraceSegment) */ {
 public:
  inline SocketStreamedTraceSegment() : SocketStreamedTraceSegment(nullptr) {}
  ~SocketStreamedTraceSegment() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SocketStreamedTraceSegment(::google::protobuf::internal::ConstantInitialized);

  SocketStreamedTraceSegment(const SocketStreamedTraceSegment& from);
  SocketStreamedTraceSegment(SocketStreamedTraceSegment&& from) noexcept
    : SocketStreamedTraceSegment() {
    *this = ::std::move(from);
  }

  inline SocketStreamedTraceSegment& operator=(const SocketStreamedTraceSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocketStreamedTraceSegment& operator=(SocketStreamedTraceSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SocketStreamedTraceSegment& default_instance() {
    return *internal_default_instance();
  }
  enum MessagePieceCase {
    kConnection = 2,
    kEvent = 3,
    MESSAGE_PIECE_NOT_SET = 0,
  };

  static inline const SocketStreamedTraceSegment* internal_default_instance() {
    return reinterpret_cast<const SocketStreamedTraceSegment*>(
               &_SocketStreamedTraceSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SocketStreamedTraceSegment& a, SocketStreamedTraceSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(SocketStreamedTraceSegment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocketStreamedTraceSegment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SocketStreamedTraceSegment* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SocketStreamedTraceSegment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SocketStreamedTraceSegment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SocketStreamedTraceSegment& from) {
    SocketStreamedTraceSegment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SocketStreamedTraceSegment* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace2.SocketStreamedTraceSegment";
  }
  protected:
  explicit SocketStreamedTraceSegment(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceIdFieldNumber = 1,
    kConnectionFieldNumber = 2,
    kEventFieldNumber = 3,
  };
  // uint64 trace_id = 1;
  void clear_trace_id() ;
  ::uint64_t trace_id() const;
  void set_trace_id(::uint64_t value);

  private:
  ::uint64_t _internal_trace_id() const;
  void _internal_set_trace_id(::uint64_t value);

  public:
  // .trace2.Connection connection = 2;
  bool has_connection() const;
  private:
  bool _internal_has_connection() const;

  public:
  void clear_connection() ;
  const ::trace2::Connection& connection() const;
  PROTOBUF_NODISCARD ::trace2::Connection* release_connection();
  ::trace2::Connection* mutable_connection();
  void set_allocated_connection(::trace2::Connection* value);
  void unsafe_arena_set_allocated_connection(::trace2::Connection* value);
  ::trace2::Connection* unsafe_arena_release_connection();

  private:
  const ::trace2::Connection& _internal_connection() const;
  ::trace2::Connection* _internal_mutable_connection();

  public:
  // .trace2.SocketEvent event = 3;
  bool has_event() const;
  private:
  bool _internal_has_event() const;

  public:
  void clear_event() ;
  const ::trace2::SocketEvent& event() const;
  PROTOBUF_NODISCARD ::trace2::SocketEvent* release_event();
  ::trace2::SocketEvent* mutable_event();
  void set_allocated_event(::trace2::SocketEvent* value);
  void unsafe_arena_set_allocated_event(::trace2::SocketEvent* value);
  ::trace2::SocketEvent* unsafe_arena_release_event();

  private:
  const ::trace2::SocketEvent& _internal_event() const;
  ::trace2::SocketEvent* _internal_mutable_event();

  public:
  void clear_message_piece();
  MessagePieceCase message_piece_case() const;
  // @@protoc_insertion_point(class_scope:trace2.SocketStreamedTraceSegment)
 private:
  class _Internal;
  void set_has_connection();
  void set_has_event();

  inline bool has_message_piece() const;
  inline void clear_has_message_piece();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 3, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t trace_id_;
    union MessagePieceUnion {
      constexpr MessagePieceUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::trace2::Connection* connection_;
      ::trace2::SocketEvent* event_;
    } message_piece_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace2_2eproto;
};// -------------------------------------------------------------------

class TraceWrapper final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace2.TraceWrapper) */ {
 public:
  inline TraceWrapper() : TraceWrapper(nullptr) {}
  ~TraceWrapper() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TraceWrapper(::google::protobuf::internal::ConstantInitialized);

  TraceWrapper(const TraceWrapper& from);
  TraceWrapper(TraceWrapper&& from) noexcept
    : TraceWrapper() {
    *this = ::std::move(from);
  }

  inline TraceWrapper& operator=(const TraceWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceWrapper& operator=(TraceWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceWrapper& default_instance() {
    return *internal_default_instance();
  }
  enum TraceCase {
    kSocketBufferedTrace = 3,
    kSocketStreamedTraceSegment = 4,
    TRACE_NOT_SET = 0,
  };

  static inline const TraceWrapper* internal_default_instance() {
    return reinterpret_cast<const TraceWrapper*>(
               &_TraceWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TraceWrapper& a, TraceWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceWrapper* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceWrapper* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceWrapper>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TraceWrapper& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TraceWrapper& from) {
    TraceWrapper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceWrapper* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "trace2.TraceWrapper";
  }
  protected:
  explicit TraceWrapper(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSocketBufferedTraceFieldNumber = 3,
    kSocketStreamedTraceSegmentFieldNumber = 4,
  };
  // .trace2.SocketBufferedTrace socket_buffered_trace = 3;
  bool has_socket_buffered_trace() const;
  private:
  bool _internal_has_socket_buffered_trace() const;

  public:
  void clear_socket_buffered_trace() ;
  const ::trace2::SocketBufferedTrace& socket_buffered_trace() const;
  PROTOBUF_NODISCARD ::trace2::SocketBufferedTrace* release_socket_buffered_trace();
  ::trace2::SocketBufferedTrace* mutable_socket_buffered_trace();
  void set_allocated_socket_buffered_trace(::trace2::SocketBufferedTrace* value);
  void unsafe_arena_set_allocated_socket_buffered_trace(::trace2::SocketBufferedTrace* value);
  ::trace2::SocketBufferedTrace* unsafe_arena_release_socket_buffered_trace();

  private:
  const ::trace2::SocketBufferedTrace& _internal_socket_buffered_trace() const;
  ::trace2::SocketBufferedTrace* _internal_mutable_socket_buffered_trace();

  public:
  // .trace2.SocketStreamedTraceSegment socket_streamed_trace_segment = 4;
  bool has_socket_streamed_trace_segment() const;
  private:
  bool _internal_has_socket_streamed_trace_segment() const;

  public:
  void clear_socket_streamed_trace_segment() ;
  const ::trace2::SocketStreamedTraceSegment& socket_streamed_trace_segment() const;
  PROTOBUF_NODISCARD ::trace2::SocketStreamedTraceSegment* release_socket_streamed_trace_segment();
  ::trace2::SocketStreamedTraceSegment* mutable_socket_streamed_trace_segment();
  void set_allocated_socket_streamed_trace_segment(::trace2::SocketStreamedTraceSegment* value);
  void unsafe_arena_set_allocated_socket_streamed_trace_segment(::trace2::SocketStreamedTraceSegment* value);
  ::trace2::SocketStreamedTraceSegment* unsafe_arena_release_socket_streamed_trace_segment();

  private:
  const ::trace2::SocketStreamedTraceSegment& _internal_socket_streamed_trace_segment() const;
  ::trace2::SocketStreamedTraceSegment* _internal_mutable_socket_streamed_trace_segment();

  public:
  void clear_trace();
  TraceCase trace_case() const;
  // @@protoc_insertion_point(class_scope:trace2.TraceWrapper)
 private:
  class _Internal;
  void set_has_socket_buffered_trace();
  void set_has_socket_streamed_trace_segment();

  inline bool has_trace() const;
  inline void clear_has_trace();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union TraceUnion {
      constexpr TraceUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::trace2::SocketBufferedTrace* socket_buffered_trace_;
      ::trace2::SocketStreamedTraceSegment* socket_streamed_trace_segment_;
    } trace_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trace2_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Body

// bytes as_bytes = 1;
inline bool Body::has_as_bytes() const {
  return body_type_case() == kAsBytes;
}
inline void Body::set_has_as_bytes() {
  _impl_._oneof_case_[0] = kAsBytes;
}
inline void Body::clear_as_bytes() {
  if (body_type_case() == kAsBytes) {
    _impl_.body_type_.as_bytes_.Destroy();
    clear_has_body_type();
  }
}
inline const std::string& Body::as_bytes() const {
  // @@protoc_insertion_point(field_get:trace2.Body.as_bytes)
  return _internal_as_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Body::set_as_bytes(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (body_type_case() != kAsBytes) {
    clear_body_type();

    set_has_as_bytes();
    _impl_.body_type_.as_bytes_.InitDefault();
  }
  _impl_.body_type_.as_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:trace2.Body.as_bytes)
}
inline std::string* Body::mutable_as_bytes() {
  std::string* _s = _internal_mutable_as_bytes();
  // @@protoc_insertion_point(field_mutable:trace2.Body.as_bytes)
  return _s;
}
inline const std::string& Body::_internal_as_bytes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (body_type_case() != kAsBytes) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.body_type_.as_bytes_.Get();
}
inline void Body::_internal_set_as_bytes(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (body_type_case() != kAsBytes) {
    clear_body_type();

    set_has_as_bytes();
    _impl_.body_type_.as_bytes_.InitDefault();
  }
  _impl_.body_type_.as_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* Body::_internal_mutable_as_bytes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (body_type_case() != kAsBytes) {
    clear_body_type();

    set_has_as_bytes();
    _impl_.body_type_.as_bytes_.InitDefault();
  }
  return _impl_.body_type_.as_bytes_.Mutable( GetArenaForAllocation());
}
inline std::string* Body::release_as_bytes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace2.Body.as_bytes)
  if (body_type_case() != kAsBytes) {
    return nullptr;
  }
  clear_has_body_type();
  return _impl_.body_type_.as_bytes_.Release();
}
inline void Body::set_allocated_as_bytes(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_body_type()) {
    clear_body_type();
  }
  if (value != nullptr) {
    set_has_as_bytes();
    _impl_.body_type_.as_bytes_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:trace2.Body.as_bytes)
}

// string as_string = 2;
inline bool Body::has_as_string() const {
  return body_type_case() == kAsString;
}
inline void Body::set_has_as_string() {
  _impl_._oneof_case_[0] = kAsString;
}
inline void Body::clear_as_string() {
  if (body_type_case() == kAsString) {
    _impl_.body_type_.as_string_.Destroy();
    clear_has_body_type();
  }
}
inline const std::string& Body::as_string() const {
  // @@protoc_insertion_point(field_get:trace2.Body.as_string)
  return _internal_as_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Body::set_as_string(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (body_type_case() != kAsString) {
    clear_body_type();

    set_has_as_string();
    _impl_.body_type_.as_string_.InitDefault();
  }
  _impl_.body_type_.as_string_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:trace2.Body.as_string)
}
inline std::string* Body::mutable_as_string() {
  std::string* _s = _internal_mutable_as_string();
  // @@protoc_insertion_point(field_mutable:trace2.Body.as_string)
  return _s;
}
inline const std::string& Body::_internal_as_string() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (body_type_case() != kAsString) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.body_type_.as_string_.Get();
}
inline void Body::_internal_set_as_string(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (body_type_case() != kAsString) {
    clear_body_type();

    set_has_as_string();
    _impl_.body_type_.as_string_.InitDefault();
  }
  _impl_.body_type_.as_string_.Set(value, GetArenaForAllocation());
}
inline std::string* Body::_internal_mutable_as_string() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (body_type_case() != kAsString) {
    clear_body_type();

    set_has_as_string();
    _impl_.body_type_.as_string_.InitDefault();
  }
  return _impl_.body_type_.as_string_.Mutable( GetArenaForAllocation());
}
inline std::string* Body::release_as_string() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace2.Body.as_string)
  if (body_type_case() != kAsString) {
    return nullptr;
  }
  clear_has_body_type();
  return _impl_.body_type_.as_string_.Release();
}
inline void Body::set_allocated_as_string(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_body_type()) {
    clear_body_type();
  }
  if (value != nullptr) {
    set_has_as_string();
    _impl_.body_type_.as_string_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:trace2.Body.as_string)
}

// bool truncated = 3;
inline void Body::clear_truncated() {
  _impl_.truncated_ = false;
}
inline bool Body::truncated() const {
  // @@protoc_insertion_point(field_get:trace2.Body.truncated)
  return _internal_truncated();
}
inline void Body::set_truncated(bool value) {
  _internal_set_truncated(value);
  // @@protoc_insertion_point(field_set:trace2.Body.truncated)
}
inline bool Body::_internal_truncated() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.truncated_;
}
inline void Body::_internal_set_truncated(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.truncated_ = value;
}

inline bool Body::has_body_type() const {
  return body_type_case() != BODY_TYPE_NOT_SET;
}
inline void Body::clear_has_body_type() {
  _impl_._oneof_case_[0] = BODY_TYPE_NOT_SET;
}
inline Body::BodyTypeCase Body::body_type_case() const {
  return Body::BodyTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SocketAddress

// .trace2.SocketAddress.Protocol protocol = 1;
inline void SocketAddress::clear_protocol() {
  _impl_.protocol_ = 0;
}
inline ::trace2::SocketAddress_Protocol SocketAddress::protocol() const {
  // @@protoc_insertion_point(field_get:trace2.SocketAddress.protocol)
  return _internal_protocol();
}
inline void SocketAddress::set_protocol(::trace2::SocketAddress_Protocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:trace2.SocketAddress.protocol)
}
inline ::trace2::SocketAddress_Protocol SocketAddress::_internal_protocol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::trace2::SocketAddress_Protocol>(_impl_.protocol_);
}
inline void SocketAddress::_internal_set_protocol(::trace2::SocketAddress_Protocol value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.protocol_ = value;
}

// string address = 2;
inline void SocketAddress::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& SocketAddress::address() const {
  // @@protoc_insertion_point(field_get:trace2.SocketAddress.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SocketAddress::set_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:trace2.SocketAddress.address)
}
inline std::string* SocketAddress::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:trace2.SocketAddress.address)
  return _s;
}
inline const std::string& SocketAddress::_internal_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.address_.Get();
}
inline void SocketAddress::_internal_set_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* SocketAddress::_internal_mutable_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* SocketAddress::release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace2.SocketAddress.address)
  return _impl_.address_.Release();
}
inline void SocketAddress::set_allocated_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:trace2.SocketAddress.address)
}

// uint32 port_value = 3;
inline bool SocketAddress::has_port_value() const {
  return port_specifier_case() == kPortValue;
}
inline void SocketAddress::set_has_port_value() {
  _impl_._oneof_case_[0] = kPortValue;
}
inline void SocketAddress::clear_port_value() {
  if (port_specifier_case() == kPortValue) {
    _impl_.port_specifier_.port_value_ = 0u;
    clear_has_port_specifier();
  }
}
inline ::uint32_t SocketAddress::port_value() const {
  // @@protoc_insertion_point(field_get:trace2.SocketAddress.port_value)
  return _internal_port_value();
}
inline void SocketAddress::set_port_value(::uint32_t value) {
  _internal_set_port_value(value);
  // @@protoc_insertion_point(field_set:trace2.SocketAddress.port_value)
}
inline ::uint32_t SocketAddress::_internal_port_value() const {
  if (port_specifier_case() == kPortValue) {
    return _impl_.port_specifier_.port_value_;
  }
  return 0u;
}
inline void SocketAddress::_internal_set_port_value(::uint32_t value) {
  if (port_specifier_case() != kPortValue) {
    clear_port_specifier();
    set_has_port_value();
  }
  _impl_.port_specifier_.port_value_ = value;
}

// string named_port = 4;
inline bool SocketAddress::has_named_port() const {
  return port_specifier_case() == kNamedPort;
}
inline void SocketAddress::set_has_named_port() {
  _impl_._oneof_case_[0] = kNamedPort;
}
inline void SocketAddress::clear_named_port() {
  if (port_specifier_case() == kNamedPort) {
    _impl_.port_specifier_.named_port_.Destroy();
    clear_has_port_specifier();
  }
}
inline const std::string& SocketAddress::named_port() const {
  // @@protoc_insertion_point(field_get:trace2.SocketAddress.named_port)
  return _internal_named_port();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SocketAddress::set_named_port(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (port_specifier_case() != kNamedPort) {
    clear_port_specifier();

    set_has_named_port();
    _impl_.port_specifier_.named_port_.InitDefault();
  }
  _impl_.port_specifier_.named_port_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:trace2.SocketAddress.named_port)
}
inline std::string* SocketAddress::mutable_named_port() {
  std::string* _s = _internal_mutable_named_port();
  // @@protoc_insertion_point(field_mutable:trace2.SocketAddress.named_port)
  return _s;
}
inline const std::string& SocketAddress::_internal_named_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (port_specifier_case() != kNamedPort) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.port_specifier_.named_port_.Get();
}
inline void SocketAddress::_internal_set_named_port(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (port_specifier_case() != kNamedPort) {
    clear_port_specifier();

    set_has_named_port();
    _impl_.port_specifier_.named_port_.InitDefault();
  }
  _impl_.port_specifier_.named_port_.Set(value, GetArenaForAllocation());
}
inline std::string* SocketAddress::_internal_mutable_named_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (port_specifier_case() != kNamedPort) {
    clear_port_specifier();

    set_has_named_port();
    _impl_.port_specifier_.named_port_.InitDefault();
  }
  return _impl_.port_specifier_.named_port_.Mutable( GetArenaForAllocation());
}
inline std::string* SocketAddress::release_named_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace2.SocketAddress.named_port)
  if (port_specifier_case() != kNamedPort) {
    return nullptr;
  }
  clear_has_port_specifier();
  return _impl_.port_specifier_.named_port_.Release();
}
inline void SocketAddress::set_allocated_named_port(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_port_specifier()) {
    clear_port_specifier();
  }
  if (value != nullptr) {
    set_has_named_port();
    _impl_.port_specifier_.named_port_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:trace2.SocketAddress.named_port)
}

// string resolver_name = 5;
inline void SocketAddress::clear_resolver_name() {
  _impl_.resolver_name_.ClearToEmpty();
}
inline const std::string& SocketAddress::resolver_name() const {
  // @@protoc_insertion_point(field_get:trace2.SocketAddress.resolver_name)
  return _internal_resolver_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SocketAddress::set_resolver_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.resolver_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:trace2.SocketAddress.resolver_name)
}
inline std::string* SocketAddress::mutable_resolver_name() {
  std::string* _s = _internal_mutable_resolver_name();
  // @@protoc_insertion_point(field_mutable:trace2.SocketAddress.resolver_name)
  return _s;
}
inline const std::string& SocketAddress::_internal_resolver_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.resolver_name_.Get();
}
inline void SocketAddress::_internal_set_resolver_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.resolver_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SocketAddress::_internal_mutable_resolver_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.resolver_name_.Mutable( GetArenaForAllocation());
}
inline std::string* SocketAddress::release_resolver_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace2.SocketAddress.resolver_name)
  return _impl_.resolver_name_.Release();
}
inline void SocketAddress::set_allocated_resolver_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.resolver_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.resolver_name_.IsDefault()) {
          _impl_.resolver_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:trace2.SocketAddress.resolver_name)
}

// bool ipv4_compat = 6;
inline void SocketAddress::clear_ipv4_compat() {
  _impl_.ipv4_compat_ = false;
}
inline bool SocketAddress::ipv4_compat() const {
  // @@protoc_insertion_point(field_get:trace2.SocketAddress.ipv4_compat)
  return _internal_ipv4_compat();
}
inline void SocketAddress::set_ipv4_compat(bool value) {
  _internal_set_ipv4_compat(value);
  // @@protoc_insertion_point(field_set:trace2.SocketAddress.ipv4_compat)
}
inline bool SocketAddress::_internal_ipv4_compat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ipv4_compat_;
}
inline void SocketAddress::_internal_set_ipv4_compat(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ipv4_compat_ = value;
}

inline bool SocketAddress::has_port_specifier() const {
  return port_specifier_case() != PORT_SPECIFIER_NOT_SET;
}
inline void SocketAddress::clear_has_port_specifier() {
  _impl_._oneof_case_[0] = PORT_SPECIFIER_NOT_SET;
}
inline SocketAddress::PortSpecifierCase SocketAddress::port_specifier_case() const {
  return SocketAddress::PortSpecifierCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Pipe

// string path = 1;
inline void Pipe::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& Pipe::path() const {
  // @@protoc_insertion_point(field_get:trace2.Pipe.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Pipe::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:trace2.Pipe.path)
}
inline std::string* Pipe::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:trace2.Pipe.path)
  return _s;
}
inline const std::string& Pipe::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void Pipe::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* Pipe::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* Pipe::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace2.Pipe.path)
  return _impl_.path_.Release();
}
inline void Pipe::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:trace2.Pipe.path)
}

// uint32 mode = 2;
inline void Pipe::clear_mode() {
  _impl_.mode_ = 0u;
}
inline ::uint32_t Pipe::mode() const {
  // @@protoc_insertion_point(field_get:trace2.Pipe.mode)
  return _internal_mode();
}
inline void Pipe::set_mode(::uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:trace2.Pipe.mode)
}
inline ::uint32_t Pipe::_internal_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mode_;
}
inline void Pipe::_internal_set_mode(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// EnvoyInternalAddress

// string server_listener_name = 1;
inline bool EnvoyInternalAddress::has_server_listener_name() const {
  return address_name_specifier_case() == kServerListenerName;
}
inline void EnvoyInternalAddress::set_has_server_listener_name() {
  _impl_._oneof_case_[0] = kServerListenerName;
}
inline void EnvoyInternalAddress::clear_server_listener_name() {
  if (address_name_specifier_case() == kServerListenerName) {
    _impl_.address_name_specifier_.server_listener_name_.Destroy();
    clear_has_address_name_specifier();
  }
}
inline const std::string& EnvoyInternalAddress::server_listener_name() const {
  // @@protoc_insertion_point(field_get:trace2.EnvoyInternalAddress.server_listener_name)
  return _internal_server_listener_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EnvoyInternalAddress::set_server_listener_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (address_name_specifier_case() != kServerListenerName) {
    clear_address_name_specifier();

    set_has_server_listener_name();
    _impl_.address_name_specifier_.server_listener_name_.InitDefault();
  }
  _impl_.address_name_specifier_.server_listener_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:trace2.EnvoyInternalAddress.server_listener_name)
}
inline std::string* EnvoyInternalAddress::mutable_server_listener_name() {
  std::string* _s = _internal_mutable_server_listener_name();
  // @@protoc_insertion_point(field_mutable:trace2.EnvoyInternalAddress.server_listener_name)
  return _s;
}
inline const std::string& EnvoyInternalAddress::_internal_server_listener_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (address_name_specifier_case() != kServerListenerName) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.address_name_specifier_.server_listener_name_.Get();
}
inline void EnvoyInternalAddress::_internal_set_server_listener_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (address_name_specifier_case() != kServerListenerName) {
    clear_address_name_specifier();

    set_has_server_listener_name();
    _impl_.address_name_specifier_.server_listener_name_.InitDefault();
  }
  _impl_.address_name_specifier_.server_listener_name_.Set(value, GetArenaForAllocation());
}
inline std::string* EnvoyInternalAddress::_internal_mutable_server_listener_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (address_name_specifier_case() != kServerListenerName) {
    clear_address_name_specifier();

    set_has_server_listener_name();
    _impl_.address_name_specifier_.server_listener_name_.InitDefault();
  }
  return _impl_.address_name_specifier_.server_listener_name_.Mutable( GetArenaForAllocation());
}
inline std::string* EnvoyInternalAddress::release_server_listener_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace2.EnvoyInternalAddress.server_listener_name)
  if (address_name_specifier_case() != kServerListenerName) {
    return nullptr;
  }
  clear_has_address_name_specifier();
  return _impl_.address_name_specifier_.server_listener_name_.Release();
}
inline void EnvoyInternalAddress::set_allocated_server_listener_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_address_name_specifier()) {
    clear_address_name_specifier();
  }
  if (value != nullptr) {
    set_has_server_listener_name();
    _impl_.address_name_specifier_.server_listener_name_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:trace2.EnvoyInternalAddress.server_listener_name)
}

// string endpoint_id = 2;
inline void EnvoyInternalAddress::clear_endpoint_id() {
  _impl_.endpoint_id_.ClearToEmpty();
}
inline const std::string& EnvoyInternalAddress::endpoint_id() const {
  // @@protoc_insertion_point(field_get:trace2.EnvoyInternalAddress.endpoint_id)
  return _internal_endpoint_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EnvoyInternalAddress::set_endpoint_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.endpoint_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:trace2.EnvoyInternalAddress.endpoint_id)
}
inline std::string* EnvoyInternalAddress::mutable_endpoint_id() {
  std::string* _s = _internal_mutable_endpoint_id();
  // @@protoc_insertion_point(field_mutable:trace2.EnvoyInternalAddress.endpoint_id)
  return _s;
}
inline const std::string& EnvoyInternalAddress::_internal_endpoint_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.endpoint_id_.Get();
}
inline void EnvoyInternalAddress::_internal_set_endpoint_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.endpoint_id_.Set(value, GetArenaForAllocation());
}
inline std::string* EnvoyInternalAddress::_internal_mutable_endpoint_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.endpoint_id_.Mutable( GetArenaForAllocation());
}
inline std::string* EnvoyInternalAddress::release_endpoint_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace2.EnvoyInternalAddress.endpoint_id)
  return _impl_.endpoint_id_.Release();
}
inline void EnvoyInternalAddress::set_allocated_endpoint_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.endpoint_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.endpoint_id_.IsDefault()) {
          _impl_.endpoint_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:trace2.EnvoyInternalAddress.endpoint_id)
}

inline bool EnvoyInternalAddress::has_address_name_specifier() const {
  return address_name_specifier_case() != ADDRESS_NAME_SPECIFIER_NOT_SET;
}
inline void EnvoyInternalAddress::clear_has_address_name_specifier() {
  _impl_._oneof_case_[0] = ADDRESS_NAME_SPECIFIER_NOT_SET;
}
inline EnvoyInternalAddress::AddressNameSpecifierCase EnvoyInternalAddress::address_name_specifier_case() const {
  return EnvoyInternalAddress::AddressNameSpecifierCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Address

// .trace2.SocketAddress socket_address = 1;
inline bool Address::has_socket_address() const {
  return address_case() == kSocketAddress;
}
inline bool Address::_internal_has_socket_address() const {
  return address_case() == kSocketAddress;
}
inline void Address::set_has_socket_address() {
  _impl_._oneof_case_[0] = kSocketAddress;
}
inline void Address::clear_socket_address() {
  if (address_case() == kSocketAddress) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.address_.socket_address_;
    }
    clear_has_address();
  }
}
inline ::trace2::SocketAddress* Address::release_socket_address() {
  // @@protoc_insertion_point(field_release:trace2.Address.socket_address)
  if (address_case() == kSocketAddress) {
    clear_has_address();
    ::trace2::SocketAddress* temp = _impl_.address_.socket_address_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.address_.socket_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trace2::SocketAddress& Address::_internal_socket_address() const {
  return address_case() == kSocketAddress
      ? *_impl_.address_.socket_address_
      : reinterpret_cast<::trace2::SocketAddress&>(::trace2::_SocketAddress_default_instance_);
}
inline const ::trace2::SocketAddress& Address::socket_address() const {
  // @@protoc_insertion_point(field_get:trace2.Address.socket_address)
  return _internal_socket_address();
}
inline ::trace2::SocketAddress* Address::unsafe_arena_release_socket_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trace2.Address.socket_address)
  if (address_case() == kSocketAddress) {
    clear_has_address();
    ::trace2::SocketAddress* temp = _impl_.address_.socket_address_;
    _impl_.address_.socket_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Address::unsafe_arena_set_allocated_socket_address(::trace2::SocketAddress* socket_address) {
  clear_address();
  if (socket_address) {
    set_has_socket_address();
    _impl_.address_.socket_address_ = socket_address;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace2.Address.socket_address)
}
inline ::trace2::SocketAddress* Address::_internal_mutable_socket_address() {
  if (address_case() != kSocketAddress) {
    clear_address();
    set_has_socket_address();
    _impl_.address_.socket_address_ = CreateMaybeMessage< ::trace2::SocketAddress >(GetArenaForAllocation());
  }
  return _impl_.address_.socket_address_;
}
inline ::trace2::SocketAddress* Address::mutable_socket_address() {
  ::trace2::SocketAddress* _msg = _internal_mutable_socket_address();
  // @@protoc_insertion_point(field_mutable:trace2.Address.socket_address)
  return _msg;
}

// .trace2.Pipe pipe = 2;
inline bool Address::has_pipe() const {
  return address_case() == kPipe;
}
inline bool Address::_internal_has_pipe() const {
  return address_case() == kPipe;
}
inline void Address::set_has_pipe() {
  _impl_._oneof_case_[0] = kPipe;
}
inline void Address::clear_pipe() {
  if (address_case() == kPipe) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.address_.pipe_;
    }
    clear_has_address();
  }
}
inline ::trace2::Pipe* Address::release_pipe() {
  // @@protoc_insertion_point(field_release:trace2.Address.pipe)
  if (address_case() == kPipe) {
    clear_has_address();
    ::trace2::Pipe* temp = _impl_.address_.pipe_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.address_.pipe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trace2::Pipe& Address::_internal_pipe() const {
  return address_case() == kPipe
      ? *_impl_.address_.pipe_
      : reinterpret_cast<::trace2::Pipe&>(::trace2::_Pipe_default_instance_);
}
inline const ::trace2::Pipe& Address::pipe() const {
  // @@protoc_insertion_point(field_get:trace2.Address.pipe)
  return _internal_pipe();
}
inline ::trace2::Pipe* Address::unsafe_arena_release_pipe() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trace2.Address.pipe)
  if (address_case() == kPipe) {
    clear_has_address();
    ::trace2::Pipe* temp = _impl_.address_.pipe_;
    _impl_.address_.pipe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Address::unsafe_arena_set_allocated_pipe(::trace2::Pipe* pipe) {
  clear_address();
  if (pipe) {
    set_has_pipe();
    _impl_.address_.pipe_ = pipe;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace2.Address.pipe)
}
inline ::trace2::Pipe* Address::_internal_mutable_pipe() {
  if (address_case() != kPipe) {
    clear_address();
    set_has_pipe();
    _impl_.address_.pipe_ = CreateMaybeMessage< ::trace2::Pipe >(GetArenaForAllocation());
  }
  return _impl_.address_.pipe_;
}
inline ::trace2::Pipe* Address::mutable_pipe() {
  ::trace2::Pipe* _msg = _internal_mutable_pipe();
  // @@protoc_insertion_point(field_mutable:trace2.Address.pipe)
  return _msg;
}

// .trace2.EnvoyInternalAddress envoy_internal_address = 3;
inline bool Address::has_envoy_internal_address() const {
  return address_case() == kEnvoyInternalAddress;
}
inline bool Address::_internal_has_envoy_internal_address() const {
  return address_case() == kEnvoyInternalAddress;
}
inline void Address::set_has_envoy_internal_address() {
  _impl_._oneof_case_[0] = kEnvoyInternalAddress;
}
inline void Address::clear_envoy_internal_address() {
  if (address_case() == kEnvoyInternalAddress) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.address_.envoy_internal_address_;
    }
    clear_has_address();
  }
}
inline ::trace2::EnvoyInternalAddress* Address::release_envoy_internal_address() {
  // @@protoc_insertion_point(field_release:trace2.Address.envoy_internal_address)
  if (address_case() == kEnvoyInternalAddress) {
    clear_has_address();
    ::trace2::EnvoyInternalAddress* temp = _impl_.address_.envoy_internal_address_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.address_.envoy_internal_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trace2::EnvoyInternalAddress& Address::_internal_envoy_internal_address() const {
  return address_case() == kEnvoyInternalAddress
      ? *_impl_.address_.envoy_internal_address_
      : reinterpret_cast<::trace2::EnvoyInternalAddress&>(::trace2::_EnvoyInternalAddress_default_instance_);
}
inline const ::trace2::EnvoyInternalAddress& Address::envoy_internal_address() const {
  // @@protoc_insertion_point(field_get:trace2.Address.envoy_internal_address)
  return _internal_envoy_internal_address();
}
inline ::trace2::EnvoyInternalAddress* Address::unsafe_arena_release_envoy_internal_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trace2.Address.envoy_internal_address)
  if (address_case() == kEnvoyInternalAddress) {
    clear_has_address();
    ::trace2::EnvoyInternalAddress* temp = _impl_.address_.envoy_internal_address_;
    _impl_.address_.envoy_internal_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Address::unsafe_arena_set_allocated_envoy_internal_address(::trace2::EnvoyInternalAddress* envoy_internal_address) {
  clear_address();
  if (envoy_internal_address) {
    set_has_envoy_internal_address();
    _impl_.address_.envoy_internal_address_ = envoy_internal_address;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace2.Address.envoy_internal_address)
}
inline ::trace2::EnvoyInternalAddress* Address::_internal_mutable_envoy_internal_address() {
  if (address_case() != kEnvoyInternalAddress) {
    clear_address();
    set_has_envoy_internal_address();
    _impl_.address_.envoy_internal_address_ = CreateMaybeMessage< ::trace2::EnvoyInternalAddress >(GetArenaForAllocation());
  }
  return _impl_.address_.envoy_internal_address_;
}
inline ::trace2::EnvoyInternalAddress* Address::mutable_envoy_internal_address() {
  ::trace2::EnvoyInternalAddress* _msg = _internal_mutable_envoy_internal_address();
  // @@protoc_insertion_point(field_mutable:trace2.Address.envoy_internal_address)
  return _msg;
}

inline bool Address::has_address() const {
  return address_case() != ADDRESS_NOT_SET;
}
inline void Address::clear_has_address() {
  _impl_._oneof_case_[0] = ADDRESS_NOT_SET;
}
inline Address::AddressCase Address::address_case() const {
  return Address::AddressCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Connection

// .trace2.Address local_address = 1;
inline bool Connection::has_local_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.local_address_ != nullptr);
  return value;
}
inline void Connection::clear_local_address() {
  if (_impl_.local_address_ != nullptr) _impl_.local_address_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::trace2::Address& Connection::_internal_local_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::trace2::Address* p = _impl_.local_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::trace2::Address&>(::trace2::_Address_default_instance_);
}
inline const ::trace2::Address& Connection::local_address() const {
  // @@protoc_insertion_point(field_get:trace2.Connection.local_address)
  return _internal_local_address();
}
inline void Connection::unsafe_arena_set_allocated_local_address(::trace2::Address* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.local_address_);
  }
  _impl_.local_address_ = reinterpret_cast<::trace2::Address*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace2.Connection.local_address)
}
inline ::trace2::Address* Connection::release_local_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trace2::Address* released = _impl_.local_address_;
  _impl_.local_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::trace2::Address* Connection::unsafe_arena_release_local_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace2.Connection.local_address)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trace2::Address* temp = _impl_.local_address_;
  _impl_.local_address_ = nullptr;
  return temp;
}
inline ::trace2::Address* Connection::_internal_mutable_local_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.local_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::trace2::Address>(GetArenaForAllocation());
    _impl_.local_address_ = reinterpret_cast<::trace2::Address*>(p);
  }
  return _impl_.local_address_;
}
inline ::trace2::Address* Connection::mutable_local_address() {
  ::trace2::Address* _msg = _internal_mutable_local_address();
  // @@protoc_insertion_point(field_mutable:trace2.Connection.local_address)
  return _msg;
}
inline void Connection::set_allocated_local_address(::trace2::Address* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::trace2::Address*>(_impl_.local_address_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::trace2::Address*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.local_address_ = reinterpret_cast<::trace2::Address*>(value);
  // @@protoc_insertion_point(field_set_allocated:trace2.Connection.local_address)
}

// .trace2.Address remote_address = 2;
inline bool Connection::has_remote_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.remote_address_ != nullptr);
  return value;
}
inline void Connection::clear_remote_address() {
  if (_impl_.remote_address_ != nullptr) _impl_.remote_address_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::trace2::Address& Connection::_internal_remote_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::trace2::Address* p = _impl_.remote_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::trace2::Address&>(::trace2::_Address_default_instance_);
}
inline const ::trace2::Address& Connection::remote_address() const {
  // @@protoc_insertion_point(field_get:trace2.Connection.remote_address)
  return _internal_remote_address();
}
inline void Connection::unsafe_arena_set_allocated_remote_address(::trace2::Address* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.remote_address_);
  }
  _impl_.remote_address_ = reinterpret_cast<::trace2::Address*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace2.Connection.remote_address)
}
inline ::trace2::Address* Connection::release_remote_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::trace2::Address* released = _impl_.remote_address_;
  _impl_.remote_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::trace2::Address* Connection::unsafe_arena_release_remote_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace2.Connection.remote_address)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::trace2::Address* temp = _impl_.remote_address_;
  _impl_.remote_address_ = nullptr;
  return temp;
}
inline ::trace2::Address* Connection::_internal_mutable_remote_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.remote_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::trace2::Address>(GetArenaForAllocation());
    _impl_.remote_address_ = reinterpret_cast<::trace2::Address*>(p);
  }
  return _impl_.remote_address_;
}
inline ::trace2::Address* Connection::mutable_remote_address() {
  ::trace2::Address* _msg = _internal_mutable_remote_address();
  // @@protoc_insertion_point(field_mutable:trace2.Connection.remote_address)
  return _msg;
}
inline void Connection::set_allocated_remote_address(::trace2::Address* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::trace2::Address*>(_impl_.remote_address_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::trace2::Address*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.remote_address_ = reinterpret_cast<::trace2::Address*>(value);
  // @@protoc_insertion_point(field_set_allocated:trace2.Connection.remote_address)
}

// -------------------------------------------------------------------

// Timestamp

// int64 seconds = 1;
inline void Timestamp::clear_seconds() {
  _impl_.seconds_ = ::int64_t{0};
}
inline ::int64_t Timestamp::seconds() const {
  // @@protoc_insertion_point(field_get:trace2.Timestamp.seconds)
  return _internal_seconds();
}
inline void Timestamp::set_seconds(::int64_t value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:trace2.Timestamp.seconds)
}
inline ::int64_t Timestamp::_internal_seconds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.seconds_;
}
inline void Timestamp::_internal_set_seconds(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.seconds_ = value;
}

// int32 nanos = 2;
inline void Timestamp::clear_nanos() {
  _impl_.nanos_ = 0;
}
inline ::int32_t Timestamp::nanos() const {
  // @@protoc_insertion_point(field_get:trace2.Timestamp.nanos)
  return _internal_nanos();
}
inline void Timestamp::set_nanos(::int32_t value) {
  _internal_set_nanos(value);
  // @@protoc_insertion_point(field_set:trace2.Timestamp.nanos)
}
inline ::int32_t Timestamp::_internal_nanos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nanos_;
}
inline void Timestamp::_internal_set_nanos(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nanos_ = value;
}

// -------------------------------------------------------------------

// SocketEvent_Read

// .trace2.Body data = 1;
inline bool SocketEvent_Read::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline void SocketEvent_Read::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::trace2::Body& SocketEvent_Read::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::trace2::Body* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::trace2::Body&>(::trace2::_Body_default_instance_);
}
inline const ::trace2::Body& SocketEvent_Read::data() const {
  // @@protoc_insertion_point(field_get:trace2.SocketEvent.Read.data)
  return _internal_data();
}
inline void SocketEvent_Read::unsafe_arena_set_allocated_data(::trace2::Body* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::trace2::Body*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace2.SocketEvent.Read.data)
}
inline ::trace2::Body* SocketEvent_Read::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trace2::Body* released = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::trace2::Body* SocketEvent_Read::unsafe_arena_release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace2.SocketEvent.Read.data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trace2::Body* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::trace2::Body* SocketEvent_Read::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::trace2::Body>(GetArenaForAllocation());
    _impl_.data_ = reinterpret_cast<::trace2::Body*>(p);
  }
  return _impl_.data_;
}
inline ::trace2::Body* SocketEvent_Read::mutable_data() {
  ::trace2::Body* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:trace2.SocketEvent.Read.data)
  return _msg;
}
inline void SocketEvent_Read::set_allocated_data(::trace2::Body* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::trace2::Body*>(_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::trace2::Body*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.data_ = reinterpret_cast<::trace2::Body*>(value);
  // @@protoc_insertion_point(field_set_allocated:trace2.SocketEvent.Read.data)
}

// -------------------------------------------------------------------

// SocketEvent_Write

// .trace2.Body data = 1;
inline bool SocketEvent_Write::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline void SocketEvent_Write::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::trace2::Body& SocketEvent_Write::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::trace2::Body* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::trace2::Body&>(::trace2::_Body_default_instance_);
}
inline const ::trace2::Body& SocketEvent_Write::data() const {
  // @@protoc_insertion_point(field_get:trace2.SocketEvent.Write.data)
  return _internal_data();
}
inline void SocketEvent_Write::unsafe_arena_set_allocated_data(::trace2::Body* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::trace2::Body*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace2.SocketEvent.Write.data)
}
inline ::trace2::Body* SocketEvent_Write::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trace2::Body* released = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::trace2::Body* SocketEvent_Write::unsafe_arena_release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace2.SocketEvent.Write.data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trace2::Body* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::trace2::Body* SocketEvent_Write::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::trace2::Body>(GetArenaForAllocation());
    _impl_.data_ = reinterpret_cast<::trace2::Body*>(p);
  }
  return _impl_.data_;
}
inline ::trace2::Body* SocketEvent_Write::mutable_data() {
  ::trace2::Body* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:trace2.SocketEvent.Write.data)
  return _msg;
}
inline void SocketEvent_Write::set_allocated_data(::trace2::Body* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::trace2::Body*>(_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::trace2::Body*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.data_ = reinterpret_cast<::trace2::Body*>(value);
  // @@protoc_insertion_point(field_set_allocated:trace2.SocketEvent.Write.data)
}

// bool end_stream = 2;
inline void SocketEvent_Write::clear_end_stream() {
  _impl_.end_stream_ = false;
}
inline bool SocketEvent_Write::end_stream() const {
  // @@protoc_insertion_point(field_get:trace2.SocketEvent.Write.end_stream)
  return _internal_end_stream();
}
inline void SocketEvent_Write::set_end_stream(bool value) {
  _internal_set_end_stream(value);
  // @@protoc_insertion_point(field_set:trace2.SocketEvent.Write.end_stream)
}
inline bool SocketEvent_Write::_internal_end_stream() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_stream_;
}
inline void SocketEvent_Write::_internal_set_end_stream(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.end_stream_ = value;
}

// -------------------------------------------------------------------

// SocketEvent_Closed

// -------------------------------------------------------------------

// SocketEvent

// .trace2.Timestamp timestamp = 1;
inline bool SocketEvent::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline void SocketEvent::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::trace2::Timestamp& SocketEvent::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::trace2::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::trace2::Timestamp&>(::trace2::_Timestamp_default_instance_);
}
inline const ::trace2::Timestamp& SocketEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:trace2.SocketEvent.timestamp)
  return _internal_timestamp();
}
inline void SocketEvent::unsafe_arena_set_allocated_timestamp(::trace2::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::trace2::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace2.SocketEvent.timestamp)
}
inline ::trace2::Timestamp* SocketEvent::release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trace2::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::trace2::Timestamp* SocketEvent::unsafe_arena_release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace2.SocketEvent.timestamp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trace2::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::trace2::Timestamp* SocketEvent::_internal_mutable_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::trace2::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = reinterpret_cast<::trace2::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::trace2::Timestamp* SocketEvent::mutable_timestamp() {
  ::trace2::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:trace2.SocketEvent.timestamp)
  return _msg;
}
inline void SocketEvent::set_allocated_timestamp(::trace2::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::trace2::Timestamp*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::trace2::Timestamp*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_ = reinterpret_cast<::trace2::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:trace2.SocketEvent.timestamp)
}

// .trace2.SocketEvent.Read read = 2;
inline bool SocketEvent::has_read() const {
  return event_selector_case() == kRead;
}
inline bool SocketEvent::_internal_has_read() const {
  return event_selector_case() == kRead;
}
inline void SocketEvent::set_has_read() {
  _impl_._oneof_case_[0] = kRead;
}
inline void SocketEvent::clear_read() {
  if (event_selector_case() == kRead) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_selector_.read_;
    }
    clear_has_event_selector();
  }
}
inline ::trace2::SocketEvent_Read* SocketEvent::release_read() {
  // @@protoc_insertion_point(field_release:trace2.SocketEvent.read)
  if (event_selector_case() == kRead) {
    clear_has_event_selector();
    ::trace2::SocketEvent_Read* temp = _impl_.event_selector_.read_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_selector_.read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trace2::SocketEvent_Read& SocketEvent::_internal_read() const {
  return event_selector_case() == kRead
      ? *_impl_.event_selector_.read_
      : reinterpret_cast<::trace2::SocketEvent_Read&>(::trace2::_SocketEvent_Read_default_instance_);
}
inline const ::trace2::SocketEvent_Read& SocketEvent::read() const {
  // @@protoc_insertion_point(field_get:trace2.SocketEvent.read)
  return _internal_read();
}
inline ::trace2::SocketEvent_Read* SocketEvent::unsafe_arena_release_read() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trace2.SocketEvent.read)
  if (event_selector_case() == kRead) {
    clear_has_event_selector();
    ::trace2::SocketEvent_Read* temp = _impl_.event_selector_.read_;
    _impl_.event_selector_.read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SocketEvent::unsafe_arena_set_allocated_read(::trace2::SocketEvent_Read* read) {
  clear_event_selector();
  if (read) {
    set_has_read();
    _impl_.event_selector_.read_ = read;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace2.SocketEvent.read)
}
inline ::trace2::SocketEvent_Read* SocketEvent::_internal_mutable_read() {
  if (event_selector_case() != kRead) {
    clear_event_selector();
    set_has_read();
    _impl_.event_selector_.read_ = CreateMaybeMessage< ::trace2::SocketEvent_Read >(GetArenaForAllocation());
  }
  return _impl_.event_selector_.read_;
}
inline ::trace2::SocketEvent_Read* SocketEvent::mutable_read() {
  ::trace2::SocketEvent_Read* _msg = _internal_mutable_read();
  // @@protoc_insertion_point(field_mutable:trace2.SocketEvent.read)
  return _msg;
}

// .trace2.SocketEvent.Write write = 3;
inline bool SocketEvent::has_write() const {
  return event_selector_case() == kWrite;
}
inline bool SocketEvent::_internal_has_write() const {
  return event_selector_case() == kWrite;
}
inline void SocketEvent::set_has_write() {
  _impl_._oneof_case_[0] = kWrite;
}
inline void SocketEvent::clear_write() {
  if (event_selector_case() == kWrite) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_selector_.write_;
    }
    clear_has_event_selector();
  }
}
inline ::trace2::SocketEvent_Write* SocketEvent::release_write() {
  // @@protoc_insertion_point(field_release:trace2.SocketEvent.write)
  if (event_selector_case() == kWrite) {
    clear_has_event_selector();
    ::trace2::SocketEvent_Write* temp = _impl_.event_selector_.write_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_selector_.write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trace2::SocketEvent_Write& SocketEvent::_internal_write() const {
  return event_selector_case() == kWrite
      ? *_impl_.event_selector_.write_
      : reinterpret_cast<::trace2::SocketEvent_Write&>(::trace2::_SocketEvent_Write_default_instance_);
}
inline const ::trace2::SocketEvent_Write& SocketEvent::write() const {
  // @@protoc_insertion_point(field_get:trace2.SocketEvent.write)
  return _internal_write();
}
inline ::trace2::SocketEvent_Write* SocketEvent::unsafe_arena_release_write() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trace2.SocketEvent.write)
  if (event_selector_case() == kWrite) {
    clear_has_event_selector();
    ::trace2::SocketEvent_Write* temp = _impl_.event_selector_.write_;
    _impl_.event_selector_.write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SocketEvent::unsafe_arena_set_allocated_write(::trace2::SocketEvent_Write* write) {
  clear_event_selector();
  if (write) {
    set_has_write();
    _impl_.event_selector_.write_ = write;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace2.SocketEvent.write)
}
inline ::trace2::SocketEvent_Write* SocketEvent::_internal_mutable_write() {
  if (event_selector_case() != kWrite) {
    clear_event_selector();
    set_has_write();
    _impl_.event_selector_.write_ = CreateMaybeMessage< ::trace2::SocketEvent_Write >(GetArenaForAllocation());
  }
  return _impl_.event_selector_.write_;
}
inline ::trace2::SocketEvent_Write* SocketEvent::mutable_write() {
  ::trace2::SocketEvent_Write* _msg = _internal_mutable_write();
  // @@protoc_insertion_point(field_mutable:trace2.SocketEvent.write)
  return _msg;
}

// .trace2.SocketEvent.Closed closed = 4;
inline bool SocketEvent::has_closed() const {
  return event_selector_case() == kClosed;
}
inline bool SocketEvent::_internal_has_closed() const {
  return event_selector_case() == kClosed;
}
inline void SocketEvent::set_has_closed() {
  _impl_._oneof_case_[0] = kClosed;
}
inline void SocketEvent::clear_closed() {
  if (event_selector_case() == kClosed) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_selector_.closed_;
    }
    clear_has_event_selector();
  }
}
inline ::trace2::SocketEvent_Closed* SocketEvent::release_closed() {
  // @@protoc_insertion_point(field_release:trace2.SocketEvent.closed)
  if (event_selector_case() == kClosed) {
    clear_has_event_selector();
    ::trace2::SocketEvent_Closed* temp = _impl_.event_selector_.closed_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_selector_.closed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trace2::SocketEvent_Closed& SocketEvent::_internal_closed() const {
  return event_selector_case() == kClosed
      ? *_impl_.event_selector_.closed_
      : reinterpret_cast<::trace2::SocketEvent_Closed&>(::trace2::_SocketEvent_Closed_default_instance_);
}
inline const ::trace2::SocketEvent_Closed& SocketEvent::closed() const {
  // @@protoc_insertion_point(field_get:trace2.SocketEvent.closed)
  return _internal_closed();
}
inline ::trace2::SocketEvent_Closed* SocketEvent::unsafe_arena_release_closed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trace2.SocketEvent.closed)
  if (event_selector_case() == kClosed) {
    clear_has_event_selector();
    ::trace2::SocketEvent_Closed* temp = _impl_.event_selector_.closed_;
    _impl_.event_selector_.closed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SocketEvent::unsafe_arena_set_allocated_closed(::trace2::SocketEvent_Closed* closed) {
  clear_event_selector();
  if (closed) {
    set_has_closed();
    _impl_.event_selector_.closed_ = closed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace2.SocketEvent.closed)
}
inline ::trace2::SocketEvent_Closed* SocketEvent::_internal_mutable_closed() {
  if (event_selector_case() != kClosed) {
    clear_event_selector();
    set_has_closed();
    _impl_.event_selector_.closed_ = CreateMaybeMessage< ::trace2::SocketEvent_Closed >(GetArenaForAllocation());
  }
  return _impl_.event_selector_.closed_;
}
inline ::trace2::SocketEvent_Closed* SocketEvent::mutable_closed() {
  ::trace2::SocketEvent_Closed* _msg = _internal_mutable_closed();
  // @@protoc_insertion_point(field_mutable:trace2.SocketEvent.closed)
  return _msg;
}

// .trace2.Connection connection_per_event = 5;
inline bool SocketEvent::has_connection_per_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connection_per_event_ != nullptr);
  return value;
}
inline void SocketEvent::clear_connection_per_event() {
  if (_impl_.connection_per_event_ != nullptr) _impl_.connection_per_event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::trace2::Connection& SocketEvent::_internal_connection_per_event() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::trace2::Connection* p = _impl_.connection_per_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::trace2::Connection&>(::trace2::_Connection_default_instance_);
}
inline const ::trace2::Connection& SocketEvent::connection_per_event() const {
  // @@protoc_insertion_point(field_get:trace2.SocketEvent.connection_per_event)
  return _internal_connection_per_event();
}
inline void SocketEvent::unsafe_arena_set_allocated_connection_per_event(::trace2::Connection* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.connection_per_event_);
  }
  _impl_.connection_per_event_ = reinterpret_cast<::trace2::Connection*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace2.SocketEvent.connection_per_event)
}
inline ::trace2::Connection* SocketEvent::release_connection_per_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::trace2::Connection* released = _impl_.connection_per_event_;
  _impl_.connection_per_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::trace2::Connection* SocketEvent::unsafe_arena_release_connection_per_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace2.SocketEvent.connection_per_event)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::trace2::Connection* temp = _impl_.connection_per_event_;
  _impl_.connection_per_event_ = nullptr;
  return temp;
}
inline ::trace2::Connection* SocketEvent::_internal_mutable_connection_per_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.connection_per_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::trace2::Connection>(GetArenaForAllocation());
    _impl_.connection_per_event_ = reinterpret_cast<::trace2::Connection*>(p);
  }
  return _impl_.connection_per_event_;
}
inline ::trace2::Connection* SocketEvent::mutable_connection_per_event() {
  ::trace2::Connection* _msg = _internal_mutable_connection_per_event();
  // @@protoc_insertion_point(field_mutable:trace2.SocketEvent.connection_per_event)
  return _msg;
}
inline void SocketEvent::set_allocated_connection_per_event(::trace2::Connection* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::trace2::Connection*>(_impl_.connection_per_event_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::trace2::Connection*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.connection_per_event_ = reinterpret_cast<::trace2::Connection*>(value);
  // @@protoc_insertion_point(field_set_allocated:trace2.SocketEvent.connection_per_event)
}

inline bool SocketEvent::has_event_selector() const {
  return event_selector_case() != EVENT_SELECTOR_NOT_SET;
}
inline void SocketEvent::clear_has_event_selector() {
  _impl_._oneof_case_[0] = EVENT_SELECTOR_NOT_SET;
}
inline SocketEvent::EventSelectorCase SocketEvent::event_selector_case() const {
  return SocketEvent::EventSelectorCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SocketBufferedTrace

// uint64 trace_id = 1;
inline void SocketBufferedTrace::clear_trace_id() {
  _impl_.trace_id_ = ::uint64_t{0u};
}
inline ::uint64_t SocketBufferedTrace::trace_id() const {
  // @@protoc_insertion_point(field_get:trace2.SocketBufferedTrace.trace_id)
  return _internal_trace_id();
}
inline void SocketBufferedTrace::set_trace_id(::uint64_t value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:trace2.SocketBufferedTrace.trace_id)
}
inline ::uint64_t SocketBufferedTrace::_internal_trace_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trace_id_;
}
inline void SocketBufferedTrace::_internal_set_trace_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trace_id_ = value;
}

// .trace2.Connection connection = 2;
inline bool SocketBufferedTrace::has_connection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connection_ != nullptr);
  return value;
}
inline void SocketBufferedTrace::clear_connection() {
  if (_impl_.connection_ != nullptr) _impl_.connection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::trace2::Connection& SocketBufferedTrace::_internal_connection() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::trace2::Connection* p = _impl_.connection_;
  return p != nullptr ? *p : reinterpret_cast<const ::trace2::Connection&>(::trace2::_Connection_default_instance_);
}
inline const ::trace2::Connection& SocketBufferedTrace::connection() const {
  // @@protoc_insertion_point(field_get:trace2.SocketBufferedTrace.connection)
  return _internal_connection();
}
inline void SocketBufferedTrace::unsafe_arena_set_allocated_connection(::trace2::Connection* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.connection_);
  }
  _impl_.connection_ = reinterpret_cast<::trace2::Connection*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace2.SocketBufferedTrace.connection)
}
inline ::trace2::Connection* SocketBufferedTrace::release_connection() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trace2::Connection* released = _impl_.connection_;
  _impl_.connection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::trace2::Connection* SocketBufferedTrace::unsafe_arena_release_connection() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:trace2.SocketBufferedTrace.connection)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trace2::Connection* temp = _impl_.connection_;
  _impl_.connection_ = nullptr;
  return temp;
}
inline ::trace2::Connection* SocketBufferedTrace::_internal_mutable_connection() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.connection_ == nullptr) {
    auto* p = CreateMaybeMessage<::trace2::Connection>(GetArenaForAllocation());
    _impl_.connection_ = reinterpret_cast<::trace2::Connection*>(p);
  }
  return _impl_.connection_;
}
inline ::trace2::Connection* SocketBufferedTrace::mutable_connection() {
  ::trace2::Connection* _msg = _internal_mutable_connection();
  // @@protoc_insertion_point(field_mutable:trace2.SocketBufferedTrace.connection)
  return _msg;
}
inline void SocketBufferedTrace::set_allocated_connection(::trace2::Connection* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::trace2::Connection*>(_impl_.connection_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::trace2::Connection*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.connection_ = reinterpret_cast<::trace2::Connection*>(value);
  // @@protoc_insertion_point(field_set_allocated:trace2.SocketBufferedTrace.connection)
}

// repeated .trace2.SocketEvent events = 3;
inline int SocketBufferedTrace::_internal_events_size() const {
  return _internal_events().size();
}
inline int SocketBufferedTrace::events_size() const {
  return _internal_events_size();
}
inline void SocketBufferedTrace::clear_events() {
  _internal_mutable_events()->Clear();
}
inline ::trace2::SocketEvent* SocketBufferedTrace::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:trace2.SocketBufferedTrace.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::trace2::SocketEvent >*
SocketBufferedTrace::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:trace2.SocketBufferedTrace.events)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_events();
}
inline const ::trace2::SocketEvent& SocketBufferedTrace::events(int index) const {
  // @@protoc_insertion_point(field_get:trace2.SocketBufferedTrace.events)
    return _internal_events().Get(index);
}
inline ::trace2::SocketEvent* SocketBufferedTrace::add_events() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::trace2::SocketEvent* _add = _internal_mutable_events()->Add();
  // @@protoc_insertion_point(field_add:trace2.SocketBufferedTrace.events)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::trace2::SocketEvent >&
SocketBufferedTrace::events() const {
  // @@protoc_insertion_point(field_list:trace2.SocketBufferedTrace.events)
  return _internal_events();
}
inline const ::google::protobuf::RepeatedPtrField<::trace2::SocketEvent>&
SocketBufferedTrace::_internal_events() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.events_;
}
inline ::google::protobuf::RepeatedPtrField<::trace2::SocketEvent>*
SocketBufferedTrace::_internal_mutable_events() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.events_;
}

// bool read_truncated = 4;
inline void SocketBufferedTrace::clear_read_truncated() {
  _impl_.read_truncated_ = false;
}
inline bool SocketBufferedTrace::read_truncated() const {
  // @@protoc_insertion_point(field_get:trace2.SocketBufferedTrace.read_truncated)
  return _internal_read_truncated();
}
inline void SocketBufferedTrace::set_read_truncated(bool value) {
  _internal_set_read_truncated(value);
  // @@protoc_insertion_point(field_set:trace2.SocketBufferedTrace.read_truncated)
}
inline bool SocketBufferedTrace::_internal_read_truncated() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.read_truncated_;
}
inline void SocketBufferedTrace::_internal_set_read_truncated(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.read_truncated_ = value;
}

// bool write_truncated = 5;
inline void SocketBufferedTrace::clear_write_truncated() {
  _impl_.write_truncated_ = false;
}
inline bool SocketBufferedTrace::write_truncated() const {
  // @@protoc_insertion_point(field_get:trace2.SocketBufferedTrace.write_truncated)
  return _internal_write_truncated();
}
inline void SocketBufferedTrace::set_write_truncated(bool value) {
  _internal_set_write_truncated(value);
  // @@protoc_insertion_point(field_set:trace2.SocketBufferedTrace.write_truncated)
}
inline bool SocketBufferedTrace::_internal_write_truncated() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.write_truncated_;
}
inline void SocketBufferedTrace::_internal_set_write_truncated(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.write_truncated_ = value;
}

// -------------------------------------------------------------------

// SocketStreamedTraceSegment

// uint64 trace_id = 1;
inline void SocketStreamedTraceSegment::clear_trace_id() {
  _impl_.trace_id_ = ::uint64_t{0u};
}
inline ::uint64_t SocketStreamedTraceSegment::trace_id() const {
  // @@protoc_insertion_point(field_get:trace2.SocketStreamedTraceSegment.trace_id)
  return _internal_trace_id();
}
inline void SocketStreamedTraceSegment::set_trace_id(::uint64_t value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:trace2.SocketStreamedTraceSegment.trace_id)
}
inline ::uint64_t SocketStreamedTraceSegment::_internal_trace_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trace_id_;
}
inline void SocketStreamedTraceSegment::_internal_set_trace_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trace_id_ = value;
}

// .trace2.Connection connection = 2;
inline bool SocketStreamedTraceSegment::has_connection() const {
  return message_piece_case() == kConnection;
}
inline bool SocketStreamedTraceSegment::_internal_has_connection() const {
  return message_piece_case() == kConnection;
}
inline void SocketStreamedTraceSegment::set_has_connection() {
  _impl_._oneof_case_[0] = kConnection;
}
inline void SocketStreamedTraceSegment::clear_connection() {
  if (message_piece_case() == kConnection) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_piece_.connection_;
    }
    clear_has_message_piece();
  }
}
inline ::trace2::Connection* SocketStreamedTraceSegment::release_connection() {
  // @@protoc_insertion_point(field_release:trace2.SocketStreamedTraceSegment.connection)
  if (message_piece_case() == kConnection) {
    clear_has_message_piece();
    ::trace2::Connection* temp = _impl_.message_piece_.connection_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_piece_.connection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trace2::Connection& SocketStreamedTraceSegment::_internal_connection() const {
  return message_piece_case() == kConnection
      ? *_impl_.message_piece_.connection_
      : reinterpret_cast<::trace2::Connection&>(::trace2::_Connection_default_instance_);
}
inline const ::trace2::Connection& SocketStreamedTraceSegment::connection() const {
  // @@protoc_insertion_point(field_get:trace2.SocketStreamedTraceSegment.connection)
  return _internal_connection();
}
inline ::trace2::Connection* SocketStreamedTraceSegment::unsafe_arena_release_connection() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trace2.SocketStreamedTraceSegment.connection)
  if (message_piece_case() == kConnection) {
    clear_has_message_piece();
    ::trace2::Connection* temp = _impl_.message_piece_.connection_;
    _impl_.message_piece_.connection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SocketStreamedTraceSegment::unsafe_arena_set_allocated_connection(::trace2::Connection* connection) {
  clear_message_piece();
  if (connection) {
    set_has_connection();
    _impl_.message_piece_.connection_ = connection;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace2.SocketStreamedTraceSegment.connection)
}
inline ::trace2::Connection* SocketStreamedTraceSegment::_internal_mutable_connection() {
  if (message_piece_case() != kConnection) {
    clear_message_piece();
    set_has_connection();
    _impl_.message_piece_.connection_ = CreateMaybeMessage< ::trace2::Connection >(GetArenaForAllocation());
  }
  return _impl_.message_piece_.connection_;
}
inline ::trace2::Connection* SocketStreamedTraceSegment::mutable_connection() {
  ::trace2::Connection* _msg = _internal_mutable_connection();
  // @@protoc_insertion_point(field_mutable:trace2.SocketStreamedTraceSegment.connection)
  return _msg;
}

// .trace2.SocketEvent event = 3;
inline bool SocketStreamedTraceSegment::has_event() const {
  return message_piece_case() == kEvent;
}
inline bool SocketStreamedTraceSegment::_internal_has_event() const {
  return message_piece_case() == kEvent;
}
inline void SocketStreamedTraceSegment::set_has_event() {
  _impl_._oneof_case_[0] = kEvent;
}
inline void SocketStreamedTraceSegment::clear_event() {
  if (message_piece_case() == kEvent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_piece_.event_;
    }
    clear_has_message_piece();
  }
}
inline ::trace2::SocketEvent* SocketStreamedTraceSegment::release_event() {
  // @@protoc_insertion_point(field_release:trace2.SocketStreamedTraceSegment.event)
  if (message_piece_case() == kEvent) {
    clear_has_message_piece();
    ::trace2::SocketEvent* temp = _impl_.message_piece_.event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_piece_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trace2::SocketEvent& SocketStreamedTraceSegment::_internal_event() const {
  return message_piece_case() == kEvent
      ? *_impl_.message_piece_.event_
      : reinterpret_cast<::trace2::SocketEvent&>(::trace2::_SocketEvent_default_instance_);
}
inline const ::trace2::SocketEvent& SocketStreamedTraceSegment::event() const {
  // @@protoc_insertion_point(field_get:trace2.SocketStreamedTraceSegment.event)
  return _internal_event();
}
inline ::trace2::SocketEvent* SocketStreamedTraceSegment::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trace2.SocketStreamedTraceSegment.event)
  if (message_piece_case() == kEvent) {
    clear_has_message_piece();
    ::trace2::SocketEvent* temp = _impl_.message_piece_.event_;
    _impl_.message_piece_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SocketStreamedTraceSegment::unsafe_arena_set_allocated_event(::trace2::SocketEvent* event) {
  clear_message_piece();
  if (event) {
    set_has_event();
    _impl_.message_piece_.event_ = event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace2.SocketStreamedTraceSegment.event)
}
inline ::trace2::SocketEvent* SocketStreamedTraceSegment::_internal_mutable_event() {
  if (message_piece_case() != kEvent) {
    clear_message_piece();
    set_has_event();
    _impl_.message_piece_.event_ = CreateMaybeMessage< ::trace2::SocketEvent >(GetArenaForAllocation());
  }
  return _impl_.message_piece_.event_;
}
inline ::trace2::SocketEvent* SocketStreamedTraceSegment::mutable_event() {
  ::trace2::SocketEvent* _msg = _internal_mutable_event();
  // @@protoc_insertion_point(field_mutable:trace2.SocketStreamedTraceSegment.event)
  return _msg;
}

inline bool SocketStreamedTraceSegment::has_message_piece() const {
  return message_piece_case() != MESSAGE_PIECE_NOT_SET;
}
inline void SocketStreamedTraceSegment::clear_has_message_piece() {
  _impl_._oneof_case_[0] = MESSAGE_PIECE_NOT_SET;
}
inline SocketStreamedTraceSegment::MessagePieceCase SocketStreamedTraceSegment::message_piece_case() const {
  return SocketStreamedTraceSegment::MessagePieceCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TraceWrapper

// .trace2.SocketBufferedTrace socket_buffered_trace = 3;
inline bool TraceWrapper::has_socket_buffered_trace() const {
  return trace_case() == kSocketBufferedTrace;
}
inline bool TraceWrapper::_internal_has_socket_buffered_trace() const {
  return trace_case() == kSocketBufferedTrace;
}
inline void TraceWrapper::set_has_socket_buffered_trace() {
  _impl_._oneof_case_[0] = kSocketBufferedTrace;
}
inline void TraceWrapper::clear_socket_buffered_trace() {
  if (trace_case() == kSocketBufferedTrace) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.trace_.socket_buffered_trace_;
    }
    clear_has_trace();
  }
}
inline ::trace2::SocketBufferedTrace* TraceWrapper::release_socket_buffered_trace() {
  // @@protoc_insertion_point(field_release:trace2.TraceWrapper.socket_buffered_trace)
  if (trace_case() == kSocketBufferedTrace) {
    clear_has_trace();
    ::trace2::SocketBufferedTrace* temp = _impl_.trace_.socket_buffered_trace_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.trace_.socket_buffered_trace_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trace2::SocketBufferedTrace& TraceWrapper::_internal_socket_buffered_trace() const {
  return trace_case() == kSocketBufferedTrace
      ? *_impl_.trace_.socket_buffered_trace_
      : reinterpret_cast<::trace2::SocketBufferedTrace&>(::trace2::_SocketBufferedTrace_default_instance_);
}
inline const ::trace2::SocketBufferedTrace& TraceWrapper::socket_buffered_trace() const {
  // @@protoc_insertion_point(field_get:trace2.TraceWrapper.socket_buffered_trace)
  return _internal_socket_buffered_trace();
}
inline ::trace2::SocketBufferedTrace* TraceWrapper::unsafe_arena_release_socket_buffered_trace() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trace2.TraceWrapper.socket_buffered_trace)
  if (trace_case() == kSocketBufferedTrace) {
    clear_has_trace();
    ::trace2::SocketBufferedTrace* temp = _impl_.trace_.socket_buffered_trace_;
    _impl_.trace_.socket_buffered_trace_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TraceWrapper::unsafe_arena_set_allocated_socket_buffered_trace(::trace2::SocketBufferedTrace* socket_buffered_trace) {
  clear_trace();
  if (socket_buffered_trace) {
    set_has_socket_buffered_trace();
    _impl_.trace_.socket_buffered_trace_ = socket_buffered_trace;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace2.TraceWrapper.socket_buffered_trace)
}
inline ::trace2::SocketBufferedTrace* TraceWrapper::_internal_mutable_socket_buffered_trace() {
  if (trace_case() != kSocketBufferedTrace) {
    clear_trace();
    set_has_socket_buffered_trace();
    _impl_.trace_.socket_buffered_trace_ = CreateMaybeMessage< ::trace2::SocketBufferedTrace >(GetArenaForAllocation());
  }
  return _impl_.trace_.socket_buffered_trace_;
}
inline ::trace2::SocketBufferedTrace* TraceWrapper::mutable_socket_buffered_trace() {
  ::trace2::SocketBufferedTrace* _msg = _internal_mutable_socket_buffered_trace();
  // @@protoc_insertion_point(field_mutable:trace2.TraceWrapper.socket_buffered_trace)
  return _msg;
}

// .trace2.SocketStreamedTraceSegment socket_streamed_trace_segment = 4;
inline bool TraceWrapper::has_socket_streamed_trace_segment() const {
  return trace_case() == kSocketStreamedTraceSegment;
}
inline bool TraceWrapper::_internal_has_socket_streamed_trace_segment() const {
  return trace_case() == kSocketStreamedTraceSegment;
}
inline void TraceWrapper::set_has_socket_streamed_trace_segment() {
  _impl_._oneof_case_[0] = kSocketStreamedTraceSegment;
}
inline void TraceWrapper::clear_socket_streamed_trace_segment() {
  if (trace_case() == kSocketStreamedTraceSegment) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.trace_.socket_streamed_trace_segment_;
    }
    clear_has_trace();
  }
}
inline ::trace2::SocketStreamedTraceSegment* TraceWrapper::release_socket_streamed_trace_segment() {
  // @@protoc_insertion_point(field_release:trace2.TraceWrapper.socket_streamed_trace_segment)
  if (trace_case() == kSocketStreamedTraceSegment) {
    clear_has_trace();
    ::trace2::SocketStreamedTraceSegment* temp = _impl_.trace_.socket_streamed_trace_segment_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.trace_.socket_streamed_trace_segment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trace2::SocketStreamedTraceSegment& TraceWrapper::_internal_socket_streamed_trace_segment() const {
  return trace_case() == kSocketStreamedTraceSegment
      ? *_impl_.trace_.socket_streamed_trace_segment_
      : reinterpret_cast<::trace2::SocketStreamedTraceSegment&>(::trace2::_SocketStreamedTraceSegment_default_instance_);
}
inline const ::trace2::SocketStreamedTraceSegment& TraceWrapper::socket_streamed_trace_segment() const {
  // @@protoc_insertion_point(field_get:trace2.TraceWrapper.socket_streamed_trace_segment)
  return _internal_socket_streamed_trace_segment();
}
inline ::trace2::SocketStreamedTraceSegment* TraceWrapper::unsafe_arena_release_socket_streamed_trace_segment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trace2.TraceWrapper.socket_streamed_trace_segment)
  if (trace_case() == kSocketStreamedTraceSegment) {
    clear_has_trace();
    ::trace2::SocketStreamedTraceSegment* temp = _impl_.trace_.socket_streamed_trace_segment_;
    _impl_.trace_.socket_streamed_trace_segment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TraceWrapper::unsafe_arena_set_allocated_socket_streamed_trace_segment(::trace2::SocketStreamedTraceSegment* socket_streamed_trace_segment) {
  clear_trace();
  if (socket_streamed_trace_segment) {
    set_has_socket_streamed_trace_segment();
    _impl_.trace_.socket_streamed_trace_segment_ = socket_streamed_trace_segment;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trace2.TraceWrapper.socket_streamed_trace_segment)
}
inline ::trace2::SocketStreamedTraceSegment* TraceWrapper::_internal_mutable_socket_streamed_trace_segment() {
  if (trace_case() != kSocketStreamedTraceSegment) {
    clear_trace();
    set_has_socket_streamed_trace_segment();
    _impl_.trace_.socket_streamed_trace_segment_ = CreateMaybeMessage< ::trace2::SocketStreamedTraceSegment >(GetArenaForAllocation());
  }
  return _impl_.trace_.socket_streamed_trace_segment_;
}
inline ::trace2::SocketStreamedTraceSegment* TraceWrapper::mutable_socket_streamed_trace_segment() {
  ::trace2::SocketStreamedTraceSegment* _msg = _internal_mutable_socket_streamed_trace_segment();
  // @@protoc_insertion_point(field_mutable:trace2.TraceWrapper.socket_streamed_trace_segment)
  return _msg;
}

inline bool TraceWrapper::has_trace() const {
  return trace_case() != TRACE_NOT_SET;
}
inline void TraceWrapper::clear_has_trace() {
  _impl_._oneof_case_[0] = TRACE_NOT_SET;
}
inline TraceWrapper::TraceCase TraceWrapper::trace_case() const {
  return TraceWrapper::TraceCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace trace2


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::trace2::SocketAddress_Protocol> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::trace2::SocketAddress_Protocol>() {
  return ::trace2::SocketAddress_Protocol_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_trace2_2eproto_2epb_2eh
